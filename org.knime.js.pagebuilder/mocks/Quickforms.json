{
    "hasPreviousPage": true,
    "nodeMessages": {},
    "wizardExecutionState": "INTERACTION_REQUIRED",
    "wizardPageContent": {
        "@class": "org.knime.js.core.JSONWebNodePage",
        "webNodePageConfiguration": {
            "@class": "org.knime.js.core.JSONWebNodePageConfiguration",
            "layout": {
                "parentLayoutLegacyMode": false,
                "rows": [
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:1",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:3",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewTaggedElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:4",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:7",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:8",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:9",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewTaggedElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:10",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:11",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:13",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:14",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:17",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:19",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:20",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:21",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:22",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:23",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:24",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:25",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:26",
                                        "useLegacyMode": false,
                                        "resizeMethod": "aspectRatio16by9",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    },
                    {
                        "type": "JSONLayoutRow",
                        "additionalClasses": [],
                        "additionalStyles": [],
                        "columns": [
                            {
                                "widthXS": 12,
                                "widthSM": null,
                                "widthMD": null,
                                "widthLG": null,
                                "widthXL": null,
                                "content": [
                                    {
                                        "type": "JSONLayoutViewContent",
                                        "nodeID": "15:0:27",
                                        "useLegacyMode": false,
                                        "resizeMethod": "viewLowestElement",
                                        "resizeInterval": null,
                                        "resizeTolerance": 5,
                                        "autoResize": true,
                                        "scrolling": false,
                                        "sizeHeight": true,
                                        "sizeWidth": false,
                                        "maxHeight": null,
                                        "maxWidth": null,
                                        "minHeight": null,
                                        "minWidth": null,
                                        "additionalClasses": [],
                                        "additionalStyles": []
                                    }
                                ],
                                "additionalClasses": [],
                                "additionalStyles": []
                            }
                        ]
                    }
                ]
            },
            "blackBoard": null,
            "selectionTranslators": [
                {
                    "mapping": null,
                    "targetIDs": [
                        "046b7eb5-e668-4f6b-8637-80e179ef6713"
                    ],
                    "sourceID": "cbeca630-c222-4955-a85e-a9668c8665a5",
                    "forward": false
                },
                {
                    "mapping": null,
                    "targetIDs": [
                        "046b7eb5-e668-4f6b-8637-80e179ef6713"
                    ],
                    "sourceID": "cbeca630-c222-4955-a85e-a9668c8665a5",
                    "forward": false
                }
            ],
            "version": "4.2.0.v202006251005"
        },
        "webNodes": {
            "15:0:19": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.selection.value.ValueSelectionQuickFormRepresentation",
                    "label": "Label",
                    "description": "Enter Description",
                    "required": true,
                    "defaultValue": {
                        "@class": "org.knime.js.base.node.quickform.selection.value.ValueSelectionQuickFormValue",
                        "column": "",
                        "value": ""
                    },
                    "currentValue": {
                        "@class": "org.knime.js.base.node.quickform.selection.value.ValueSelectionQuickFormValue",
                        "column": "",
                        "value": ""
                    },
                    "columnType": "All",
                    "lockColumn": false,
                    "possibleValues": {
                        "Cluster Membership": [
                            "Cluster_0",
                            "Cluster_1",
                            "Cluster_2",
                            "Cluster_3"
                        ]
                    },
                    "type": "Dropdown",
                    "limitNumberVisOptions": false,
                    "numberVisOptions": 10,
                    "possibleColumns": [
                        "Cluster Membership"
                    ]
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.selection.value.ValueSelectionQuickFormValue",
                    "column": "",
                    "value": ""
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/org/knime/js/base/dialog/selection/single/DropdownSingleSelection.js",
                    "/org/knime/js/base/dialog/selection/single/ListSingleSelection.js",
                    "/org/knime/js/base/dialog/selection/single/RadioButtonSingleSelection.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/js/base/node/quickform/selection/value/ValueSelection.js"
                ],
                "initMethodName": "init",
                "validateMethodName": null,
                "setValidationErrorMethodName": null,
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": "Auto-guessing default column and value.",
                    "displayPossible": true,
                    "nodeName": "Value Selection"
                },
                "namespace": "org_knime_js_base_node_quickform_selection_value"
            },
            "15:0:13": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.selection.multiple.MultipleSelectionQuickFormRepresentation",
                    "label": "Label",
                    "description": "Enter Description",
                    "required": true,
                    "defaultValue": {
                        "@class": "org.knime.js.base.node.quickform.selection.multiple.MultipleSelectionQuickFormValue",
                        "value": []
                    },
                    "currentValue": {
                        "@class": "org.knime.js.base.node.quickform.selection.multiple.MultipleSelectionQuickFormValue",
                        "value": []
                    },
                    "possibleChoices": [],
                    "type": "Twinlist",
                    "limitNumberVisOptions": false,
                    "numberVisOptions": 10
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.selection.multiple.MultipleSelectionQuickFormValue",
                    "value": []
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/js-lib/knime/knime_twinlist_1_0_0.js",
                    "/org/knime/js/base/dialog/selection/multiple/CheckBoxesMultipleSelections.js",
                    "/org/knime/js/base/dialog/selection/multiple/ListMultipleSelections.js",
                    "/org/knime/js/base/dialog/selection/multiple/TwinlistMultipleSelections.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/js/base/node/quickform/selection/multiple/MultipleSelection.js"
                ],
                "initMethodName": "init",
                "validateMethodName": null,
                "setValidationErrorMethodName": null,
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": "Node created an empty data table.",
                    "displayPossible": true,
                    "nodeName": "Multiple Selections"
                },
                "namespace": "org_knime_js_base_node_quickform_selection_multiple"
            },
            "15:0:24": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.output.image.ImageOutputRepresentation",
                    "imageData": "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n    \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\" >\n<svg contentScriptType=\"text/ecmascript\" width=\"800\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\" zoomAndPan=\"magnify\"\n     class=\"main-svg\" contentStyleType=\"text/css\" height=\"600\"\n     preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\"\n     version=\"1.0\">&quot;&gt;\n    <g xmlns=\"http://www.w3.org/2000/svg\">\n        <rect style=\"fill: #FFFFFF;width:800px;height:600px\" width=\"800\"\n              height=\"600\"/>\n    </g>\n    <svg contentScriptType=\"text/ecmascript\" width=\"800\"\n         xmlns:xlink=\"http://www.w3.org/1999/xlink\" zoomAndPan=\"magnify\"\n         style=\"background: rgb(255, 255, 255);\" class=\"main-svg\"\n         contentStyleType=\"text/css\" height=\"600\"\n         preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\"\n         version=\"1.0\">\n        <style type=\"text/css\" xml:space=\"preserve\">.js-plotly-plot .plotly .cursor-ne-resize { cursor: ne-resize; }\n.js-plotly-plot .plotly .cursor-n-resize { cursor: n-resize; }\n.js-plotly-plot .plotly .cursor-nw-resize { cursor: nw-resize; }\n.js-plotly-plot .plotly .cursor-e-resize { cursor: e-resize; }\n.js-plotly-plot .plotly .cursor-w-resize { cursor: w-resize; }\n.js-plotly-plot .plotly .cursor-se-resize { cursor: se-resize; }\n.js-plotly-plot .plotly .cursor-s-resize { cursor: s-resize; }\n.js-plotly-plot .plotly .cursor-sw-resize { cursor: sw-resize; }\n.js-plotly-plot .plotly .cursor-ew-resize { cursor: ew-resize; }\n.js-plotly-plot .plotly .cursor-ns-resize { cursor: ns-resize; }\n.js-plotly-plot .plotly .cursor-crosshair { cursor: crosshair; }\n.js-plotly-plot .plotly .main-svg .draglayer { pointer-events: all; }\n.js-plotly-plot .plotly .crisp { shape-rendering: crispedges; }</style><defs id=\"defs-402f37\">\n            <g class=\"clips\">\n                <clipPath class=\"plotclip\" id=\"clip402f37xyplot\">\n                    <rect width=\"735\" height=\"515\"/>\n                </clipPath>\n                <clipPath class=\"axesclip\" id=\"clip402f37x\">\n                    <rect x=\"50\" width=\"735\" y=\"0\" height=\"600\"/>\n                </clipPath>\n                <clipPath class=\"axesclip\" id=\"clip402f37y\">\n                    <rect x=\"0\" width=\"800\" y=\"50\" height=\"515\"/>\n                </clipPath>\n                <clipPath class=\"axesclip\" id=\"clip402f37xy\">\n                    <rect x=\"50\" width=\"735\" y=\"50\" height=\"515\"/>\n                </clipPath>\n            </g>\n            <g class=\"gradients\"/>\n        </defs>\n        <g class=\"bglayer\"/>\n        <g class=\"draglayer cursor-crosshair\">\n            <g class=\"xy\">\n                <rect x=\"50\" y=\"50\" width=\"735\"\n                      style=\"fill: rgb(255, 255, 255); stroke-width: 0; pointer-events: all;\"\n                      data-subplot=\"xy\" class=\"nsewdrag drag\" height=\"515\"/>\n                <rect x=\"30\" y=\"30\" width=\"20\"\n                      style=\"fill: rgb(255, 255, 255); stroke-width: 0; pointer-events: all;\"\n                      data-subplot=\"xy\" class=\"nwdrag drag cursor-nw-resize\"\n                      height=\"20\"/>\n                <rect x=\"785\" y=\"30\" width=\"20\"\n                      style=\"fill: rgb(255, 255, 255); stroke-width: 0; pointer-events: all;\"\n                      data-subplot=\"xy\" class=\"nedrag drag cursor-ne-resize\"\n                      height=\"20\"/>\n                <rect x=\"30\" y=\"565\" width=\"20\"\n                      style=\"fill: rgb(255, 255, 255); stroke-width: 0; pointer-events: all;\"\n                      data-subplot=\"xy\" class=\"swdrag drag cursor-sw-resize\"\n                      height=\"20\"/>\n                <rect x=\"785\" y=\"565\" width=\"20\"\n                      style=\"fill: rgb(255, 255, 255); stroke-width: 0; pointer-events: all;\"\n                      data-subplot=\"xy\" class=\"sedrag drag cursor-se-resize\"\n                      height=\"20\"/>\n                <rect x=\"123.5\" y=\"565.5\" width=\"588\"\n                      style=\"fill: rgb(255, 255, 255); stroke-width: 0; pointer-events: all;\"\n                      data-subplot=\"xy\" class=\"ewdrag drag cursor-ew-resize\"\n                      height=\"20\"/>\n                <rect x=\"50\" y=\"565.5\" width=\"73.5\"\n                      style=\"fill: rgb(255, 255, 255); stroke-width: 0; pointer-events: all;\"\n                      data-subplot=\"xy\" class=\"wdrag drag cursor-w-resize\"\n                      height=\"20\"/>\n                <rect x=\"711.5\" y=\"565.5\" width=\"73.5\"\n                      style=\"fill: rgb(255, 255, 255); stroke-width: 0; pointer-events: all;\"\n                      data-subplot=\"xy\" class=\"edrag drag cursor-e-resize\"\n                      height=\"20\"/>\n                <rect x=\"29.5\" y=\"101.5\" width=\"20\"\n                      style=\"fill: rgb(255, 255, 255); stroke-width: 0; pointer-events: all;\"\n                      data-subplot=\"xy\" class=\"nsdrag drag cursor-ns-resize\"\n                      height=\"412\"/>\n                <rect x=\"29.5\" y=\"513.5\" width=\"20\"\n                      style=\"fill: rgb(255, 255, 255); stroke-width: 0; pointer-events: all;\"\n                      data-subplot=\"xy\" class=\"sdrag drag cursor-s-resize\"\n                      height=\"51.5\"/>\n                <rect x=\"29.5\" y=\"50\" width=\"20\"\n                      style=\"fill: rgb(255, 255, 255); stroke-width: 0; pointer-events: all;\"\n                      data-subplot=\"xy\" class=\"ndrag drag cursor-n-resize\"\n                      height=\"51.5\"/>\n            </g>\n        </g>\n        <g class=\"layer-below\">\n            <g class=\"imagelayer\"/>\n            <g class=\"shapelayer\"/>\n        </g>\n        <g class=\"cartesianlayer\">\n            <g class=\"subplot xy\">\n                <g class=\"layer-subplot\" style=\"fill: rgb(255, 255, 255);\">\n                    <g class=\"shapelayer\"/>\n                    <g class=\"imagelayer\"/>\n                </g>\n                <g class=\"gridlayer\" style=\"fill: rgb(255, 255, 255);\">\n                    <g class=\"x\">\n                        <path d=\"M0,50v515\"\n                              style=\"stroke: rgb(0, 0, 0); stroke-opacity: 0.15; stroke-width: 1px;\"\n                              class=\"xgrid crisp\" transform=\"translate(417.5,0)\"/>\n                    </g>\n                    <g class=\"y\">\n                        <path d=\"M50,0h735\"\n                              style=\"stroke: rgb(0, 0, 0); stroke-opacity: 0.15; stroke-width: 1px;\"\n                              class=\"ygrid crisp\" transform=\"translate(0,307.5)\"/>\n                    </g>\n                </g>\n                <g class=\"zerolinelayer\" style=\"fill: rgb(255, 255, 255);\"/>\n                <path class=\"xlines-below\" style=\"fill: rgb(255, 255, 255);\"/>\n                <path class=\"ylines-below\" style=\"fill: rgb(255, 255, 255);\"/>\n                <g class=\"overlines-below\" style=\"fill: rgb(255, 255, 255);\"/>\n                <g class=\"xaxislayer-below\" style=\"fill: rgb(255, 255, 255);\"/>\n                <g class=\"yaxislayer-below\" style=\"fill: rgb(255, 255, 255);\"/>\n                <g class=\"overaxes-below\" style=\"fill: rgb(255, 255, 255);\"/>\n                <g style=\"fill: rgb(255, 255, 255);\" class=\"plot\"\n                   clip-path=\"url(&apos;#clip402f37xyplot&apos;)\"\n                   transform=\"translate(50, 50)\">\n                    <g class=\"scatterlayer mlayer\">\n                        <g class=\"trace scatter trace1b0358\"\n                           style=\"stroke-miterlimit: 2; opacity: 1;\">\n                            <g class=\"fills\"/>\n                            <g class=\"errorbars\"/>\n                            <g class=\"lines\"/>\n                            <g class=\"points\">\n                                <path d=\"M19.62,0A19.62,19.62 0 1,1 0,-19.62A19.62,19.62 0 0,1 19.62,0Z\"\n                                      style=\"opacity: 0.5; stroke-width: 1px; fill: rgb(64, 64, 64); fill-opacity: 1; stroke: rgb(255, 255, 255); stroke-opacity: 1;\"\n                                      class=\"point\"\n                                      transform=\"translate(367.5,257.5)\"/>\n                                <path d=\"M15.99,0A15.99,15.99 0 1,1 0,-15.99A15.99,15.99 0 0,1 15.99,0Z\"\n                                      style=\"opacity: 0.5; stroke-width: 1px; fill: rgb(64, 64, 64); fill-opacity: 1; stroke: rgb(255, 255, 255); stroke-opacity: 1;\"\n                                      class=\"point\"\n                                      transform=\"translate(367.5,257.5)\"/>\n                                <path d=\"M12.86,0A12.86,12.86 0 1,1 0,-12.86A12.86,12.86 0 0,1 12.86,0Z\"\n                                      style=\"opacity: 0.5; stroke-width: 1px; fill: rgb(64, 64, 64); fill-opacity: 1; stroke: rgb(255, 255, 255); stroke-opacity: 1;\"\n                                      class=\"point\"\n                                      transform=\"translate(367.5,257.5)\"/>\n                                <path d=\"M15.81,0A15.81,15.81 0 1,1 0,-15.81A15.81,15.81 0 0,1 15.81,0Z\"\n                                      style=\"opacity: 0.5; stroke-width: 1px; fill: rgb(64, 64, 64); fill-opacity: 1; stroke: rgb(255, 255, 255); stroke-opacity: 1;\"\n                                      class=\"point\"\n                                      transform=\"translate(367.5,257.5)\"/>\n                                <path d=\"M13.28,0A13.28,13.28 0 1,1 0,-13.28A13.28,13.28 0 0,1 13.28,0Z\"\n                                      style=\"opacity: 0.5; stroke-width: 1px; fill: rgb(64, 64, 64); fill-opacity: 1; stroke: rgb(255, 255, 255); stroke-opacity: 1;\"\n                                      class=\"point\"\n                                      transform=\"translate(367.5,257.5)\"/>\n                                <path d=\"M19.61,0A19.61,19.61 0 1,1 0,-19.61A19.61,19.61 0 0,1 19.61,0Z\"\n                                      style=\"opacity: 0.5; stroke-width: 1px; fill: rgb(64, 64, 64); fill-opacity: 1; stroke: rgb(255, 255, 255); stroke-opacity: 1;\"\n                                      class=\"point\"\n                                      transform=\"translate(367.5,257.5)\"/>\n                                <path d=\"M18.55,0A18.55,18.55 0 1,1 0,-18.55A18.55,18.55 0 0,1 18.55,0Z\"\n                                      style=\"opacity: 0.5; stroke-width: 1px; fill: rgb(64, 64, 64); fill-opacity: 1; stroke: rgb(255, 255, 255); stroke-opacity: 1;\"\n                                      class=\"point\"\n                                      transform=\"translate(367.5,257.5)\"/>\n                                <path d=\"M20,0A20,20 0 1,1 0,-20A20,20 0 0,1 20,0Z\"\n                                      style=\"opacity: 0.5; stroke-width: 1px; fill: rgb(64, 64, 64); fill-opacity: 1; stroke: rgb(255, 255, 255); stroke-opacity: 1;\"\n                                      class=\"point\"\n                                      transform=\"translate(367.5,257.5)\"/>\n                                <path d=\"M6.88,0A6.88,6.88 0 1,1 0,-6.88A6.88,6.88 0 0,1 6.88,0Z\"\n                                      style=\"opacity: 0.5; stroke-width: 1px; fill: rgb(64, 64, 64); fill-opacity: 1; stroke: rgb(255, 255, 255); stroke-opacity: 1;\"\n                                      class=\"point\"\n                                      transform=\"translate(367.5,257.5)\"/>\n                                <path d=\"M18.69,0A18.69,18.69 0 1,1 0,-18.69A18.69,18.69 0 0,1 18.69,0Z\"\n                                      style=\"opacity: 0.5; stroke-width: 1px; fill: rgb(64, 64, 64); fill-opacity: 1; stroke: rgb(255, 255, 255); stroke-opacity: 1;\"\n                                      class=\"point\"\n                                      transform=\"translate(367.5,257.5)\"/>\n                            </g>\n                            <g class=\"text\"/>\n                        </g>\n                    </g>\n                </g>\n                <g class=\"overplot\" style=\"fill: rgb(255, 255, 255);\"/>\n                <path class=\"xlines-above crisp\"\n                      style=\"fill: rgb(255, 255, 255); stroke-width: 1px; stroke: rgb(0, 0, 0); stroke-opacity: 1;\"\n                      d=\"M49,565.5H785\"/>\n                <path class=\"ylines-above crisp\"\n                      style=\"fill: rgb(255, 255, 255); stroke-width: 1px; stroke: rgb(0, 0, 0); stroke-opacity: 1;\"\n                      d=\"M49.5,50V565\"/>\n                <g class=\"overlines-above\" style=\"fill: rgb(255, 255, 255);\"/>\n                <g class=\"xaxislayer-above\" style=\"fill: rgb(255, 255, 255);\">\n                    <g class=\"xtick\">\n                        <text x=\"0\" y=\"580.4\" transform=\"translate(417.5,0)\"\n                              text-anchor=\"middle\" data-math=\"N\"\n                              style=\"font-family: sans-serif; font-size: 12px; fill: rgb(68, 68, 68); fill-opacity: 1; white-space: pre;\"\n                              data-unformatted=\"Cluster_0\">\n                            Cluster_0\n                        </text>\n                    </g>\n                </g>\n                <g class=\"yaxislayer-above\" style=\"fill: rgb(255, 255, 255);\">\n                    <g class=\"ytick\">\n                        <text x=\"40.6\" y=\"4.199999999999999\"\n                              transform=\"translate(0,307.5) rotate(-90,40.6,-1.8000000000000007)\"\n                              text-anchor=\"middle\" data-math=\"N\"\n                              style=\"font-family: sans-serif; font-size: 12px; fill: rgb(68, 68, 68); fill-opacity: 1; white-space: pre;\"\n                              data-unformatted=\"Cluster_0\">\n                            Cluster_0\n                        </text>\n                    </g>\n                </g>\n                <g class=\"overaxes-above\" style=\"fill: rgb(255, 255, 255);\"/>\n            </g>\n        </g>\n        <g class=\"polarlayer\"/>\n        <g class=\"ternarylayer\"/>\n        <g class=\"geolayer\"/>\n        <g class=\"pielayer\"/>\n        <g class=\"sunburstlayer\"/>\n        <g class=\"glimages\"/>\n    </svg>\n    <svg contentScriptType=\"text/ecmascript\" width=\"800\"\n         xmlns:xlink=\"http://www.w3.org/1999/xlink\" zoomAndPan=\"magnify\"\n         class=\"main-svg\" contentStyleType=\"text/css\" height=\"600\"\n         preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\"\n         version=\"1.0\">\n        <style type=\"text/css\" xml:space=\"preserve\">.gtitle { font-size: 24px !important; }</style><defs id=\"topdefs-402f37\">\n            <g class=\"clips\"/>\n        </defs>\n        <g class=\"layer-above\">\n            <g class=\"imagelayer\"/>\n            <g class=\"shapelayer\"/>\n        </g>\n        <g class=\"infolayer\">\n            <g class=\"g-gtitle\">\n                <text x=\"400\" y=\"50\" text-anchor=\"middle\" data-math=\"N\"\n                      style=\"font-family: sans-serif; font-size: 17px; fill: rgb(68, 68, 68); opacity: 1; font-weight: normal; white-space: pre;\"\n                      class=\"gtitle\" data-unformatted=\"Bubble Chart\" dy=\"-.5em\">\n                    Bubble Chart\n                </text>\n            </g>\n            <g class=\"g-xtitle\" transform=\"translate(0,-20)\">\n                <text x=\"417.5\" y=\"617\" text-anchor=\"middle\" data-math=\"N\"\n                      style=\"font-family: sans-serif; font-size: 14px; fill: rgb(68, 68, 68); opacity: 1; font-weight: normal; white-space: pre;\"\n                      class=\"xtitle\" data-unformatted=\"Cluster Membership\">\n                    Cluster Membership\n                </text>\n            </g>\n            <g class=\"g-ytitle\" transform=\"translate(0.5,0)\">\n                <text x=\"12\" y=\"307.5\" transform=\"rotate(-90,12,307.5)\"\n                      text-anchor=\"middle\" data-math=\"N\"\n                      style=\"font-family: sans-serif; font-size: 14px; fill: rgb(68, 68, 68); opacity: 1; font-weight: normal; white-space: pre;\"\n                      class=\"ytitle\" data-unformatted=\"Cluster Membership\">\n                    Cluster Membership\n                </text>\n            </g>\n        </g>\n        <g class=\"menulayer\"/>\n        <g class=\"zoomlayer\"/>\n    </svg>\n    <svg contentScriptType=\"text/ecmascript\" width=\"800\"\n         xmlns:xlink=\"http://www.w3.org/1999/xlink\" zoomAndPan=\"magnify\"\n         class=\"main-svg\" contentStyleType=\"text/css\" height=\"600\"\n         preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\"\n         version=\"1.0\">\n        <g class=\"hoverlayer\"/>\n    </svg>\n</svg>",
                    "imageFormat": "SVG",
                    "maxHeight": 300,
                    "maxWidth": 300,
                    "description": "Enter Description",
                    "label": "Label"
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.output.image.ImageOutputValue"
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/js/base/node/output/image/ImageOutput.js"
                ],
                "initMethodName": "init",
                "validateMethodName": "validate",
                "setValidationErrorMethodName": "setValidationErrorMessage",
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": null,
                    "displayPossible": true,
                    "nodeName": "Image Output"
                },
                "namespace": "org_knime_js_base_node_output_image"
            },
            "15:0:14": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.selection.single.SingleSelectionQuickFormRepresentation",
                    "label": "Label",
                    "description": "Enter Description",
                    "required": true,
                    "defaultValue": {
                        "@class": "org.knime.js.base.node.quickform.selection.single.SingleSelectionQuickFormValue",
                        "value": ""
                    },
                    "currentValue": {
                        "@class": "org.knime.js.base.node.quickform.selection.single.SingleSelectionQuickFormValue",
                        "value": ""
                    },
                    "possibleChoices": [],
                    "type": "Dropdown",
                    "limitNumberVisOptions": false,
                    "numberVisOptions": 10
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.selection.single.SingleSelectionQuickFormValue",
                    "value": ""
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/org/knime/js/base/dialog/selection/single/DropdownSingleSelection.js",
                    "/org/knime/js/base/dialog/selection/single/ListSingleSelection.js",
                    "/org/knime/js/base/dialog/selection/single/RadioButtonSingleSelection.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/js/base/node/quickform/selection/single/SingleSelection.js"
                ],
                "initMethodName": "init",
                "validateMethodName": null,
                "setValidationErrorMethodName": null,
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": null,
                    "displayPossible": true,
                    "nodeName": "Single Selection"
                },
                "namespace": "org_knime_js_base_node_quickform_selection_single"
            },
            "15:0:25": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.output.text.TextOutputRepresentation",
                    "textFormat": "Text",
                    "text": "something\n",
                    "description": "Enter Description",
                    "label": "Label"
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.output.text.TextOutputValue"
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/js/base/node/output/text/TextOutput.js"
                ],
                "initMethodName": "init",
                "validateMethodName": "validate",
                "setValidationErrorMethodName": "setValidationErrorMessage",
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": null,
                    "displayPossible": true,
                    "nodeName": "Text Output"
                },
                "namespace": "org_knime_js_base_node_output_text"
            },
            "15:0:11": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.input.string.StringInputQuickFormRepresentation",
                    "label": "Label",
                    "description": "Enter Description",
                    "required": true,
                    "defaultValue": {
                        "@class": "org.knime.js.base.node.quickform.input.string.StringInputQuickFormValue",
                        "string": ""
                    },
                    "currentValue": {
                        "@class": "org.knime.js.base.node.quickform.input.string.StringInputQuickFormValue",
                        "string": ""
                    },
                    "regex": "",
                    "errormessage": "",
                    "editorType": "Single-line",
                    "multilineEditorWidth": 60,
                    "multilineEditorHeight": 5
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.input.string.StringInputQuickFormValue",
                    "string": ""
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/js/base/node/quickform/input/string/StringInput.js"
                ],
                "initMethodName": "init",
                "validateMethodName": "validate",
                "setValidationErrorMethodName": "setValidationErrorMessage",
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": null,
                    "displayPossible": true,
                    "nodeName": "String Input"
                },
                "namespace": "org_knime_js_base_node_quickform_input_string"
            },
            "15:0:22": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.filter.value.ValueFilterQuickFormRepresentation",
                    "label": "Label",
                    "description": "Enter Description",
                    "required": true,
                    "defaultValue": {
                        "@class": "org.knime.js.base.node.quickform.filter.value.ValueFilterQuickFormValue",
                        "column": "",
                        "values": []
                    },
                    "currentValue": {
                        "@class": "org.knime.js.base.node.quickform.filter.value.ValueFilterQuickFormValue",
                        "column": "",
                        "values": []
                    },
                    "lockColumn": false,
                    "possibleValues": {
                        "Cluster Membership": [
                            "Cluster_0",
                            "Cluster_1",
                            "Cluster_2",
                            "Cluster_3"
                        ]
                    },
                    "type": "Twinlist",
                    "limitNumberVisOptions": false,
                    "numberVisOptions": 10,
                    "possibleColumns": [
                        "Cluster Membership"
                    ]
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.filter.value.ValueFilterQuickFormValue",
                    "column": "",
                    "values": []
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/js-lib/knime/knime_twinlist_1_0_0.js",
                    "/org/knime/js/base/dialog/selection/multiple/CheckBoxesMultipleSelections.js",
                    "/org/knime/js/base/dialog/selection/multiple/ListMultipleSelections.js",
                    "/org/knime/js/base/dialog/selection/multiple/TwinlistMultipleSelections.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/js/base/node/quickform/filter/value/ValueFilter.js"
                ],
                "initMethodName": "init",
                "validateMethodName": null,
                "setValidationErrorMethodName": "setValidationErrorMessage",
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": "Auto-guessing default column and value.",
                    "displayPossible": true,
                    "nodeName": "Value Filter"
                },
                "namespace": "org_knime_js_base_node_quickform_filter_value"
            },
            "15:0:23": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.filter.definition.value.ValueFilterDefinitionRepresentation",
                    "disabled": false,
                    "possibleValues": [
                        "Cluster_0",
                        "Cluster_1",
                        "Cluster_2",
                        "Cluster_3"
                    ],
                    "numberVisOptions": 10,
                    "type": "Twinlist",
                    "tableID": "b14bc8c9-933b-4669-a841-e0f1228050d5",
                    "multipleValues": true,
                    "filterID": "867e9252-84d5-41c4-8c5e-759317e08f93",
                    "limitNumberVisOptions": false,
                    "label": null,
                    "column": "Cluster Membership"
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.filter.definition.RangeFilterValue",
                    "filter": {
                        "type": "range",
                        "columns": [
                            {
                                "type": "nominal",
                                "values": [
                                    "Cluster_0",
                                    "Cluster_1",
                                    "Cluster_2",
                                    "Cluster_3"
                                ],
                                "columnName": "Cluster Membership"
                            }
                        ],
                        "id": "867e9252-84d5-41c4-8c5e-759317e08f93",
                        "rows": null
                    }
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/org/knime/js/base/dialog/selection/single/DropdownSingleSelection.js",
                    "/org/knime/js/base/dialog/selection/single/ListSingleSelection.js",
                    "/org/knime/js/base/dialog/selection/single/RadioButtonSingleSelection.js",
                    "/js-lib/knime/knime_twinlist_1_0_0.js",
                    "/org/knime/js/base/dialog/selection/multiple/CheckBoxesMultipleSelections.js",
                    "/org/knime/js/base/dialog/selection/multiple/ListMultipleSelections.js",
                    "/org/knime/js/base/dialog/selection/multiple/TwinlistMultipleSelections.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/js/base/node/quickform/filter/definition/value/ValueFilterDefinition.js"
                ],
                "initMethodName": "init",
                "validateMethodName": "validate",
                "setValidationErrorMethodName": "setValidationErrorMessage",
                "getViewValueMethodName": "getComponentValue",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": null,
                    "displayPossible": true,
                    "nodeName": "Value Filter Definition"
                },
                "namespace": "org_knime_js_base_node_quickform_filter_definition_value"
            },
            "15:0:17": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.selection.value.ValueSelectionQuickFormRepresentation",
                    "label": "Label",
                    "description": "Enter Description",
                    "required": true,
                    "defaultValue": {
                        "@class": "org.knime.js.base.node.quickform.selection.value.ValueSelectionQuickFormValue",
                        "column": "",
                        "value": ""
                    },
                    "currentValue": {
                        "@class": "org.knime.js.base.node.quickform.selection.value.ValueSelectionQuickFormValue",
                        "column": "",
                        "value": ""
                    },
                    "columnType": "All",
                    "lockColumn": false,
                    "possibleValues": {
                        "Cluster Membership": [
                            "Cluster_0",
                            "Cluster_1",
                            "Cluster_2",
                            "Cluster_3"
                        ]
                    },
                    "type": "Dropdown",
                    "limitNumberVisOptions": false,
                    "numberVisOptions": 10,
                    "possibleColumns": [
                        "Cluster Membership"
                    ]
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.selection.value.ValueSelectionQuickFormValue",
                    "column": "",
                    "value": ""
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/org/knime/js/base/dialog/selection/single/DropdownSingleSelection.js",
                    "/org/knime/js/base/dialog/selection/single/ListSingleSelection.js",
                    "/org/knime/js/base/dialog/selection/single/RadioButtonSingleSelection.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/js/base/node/quickform/selection/value/ValueSelection.js"
                ],
                "initMethodName": "init",
                "validateMethodName": null,
                "setValidationErrorMethodName": null,
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": "Auto-guessing default column and value.",
                    "displayPossible": true,
                    "nodeName": "Value Selection"
                },
                "namespace": "org_knime_js_base_node_quickform_selection_value"
            },
            "15:0:26": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.dynamic.js.v30.DynamicJSViewRepresentation",
                    "runningInView": true,
                    "errorMessage": "",
                    "inObjects": [
                        {
                            "spec": {
                                "@class": "org.knime.js.core.JSONDataTableSpec",
                                "possibleValues": [
                                    null,
                                    null,
                                    null,
                                    null,
                                    [
                                        "Cluster_0"
                                    ]
                                ],
                                "colNames": [
                                    "Universe_0_0",
                                    "Universe_0_1",
                                    "Universe_1_0",
                                    "Universe_1_1",
                                    "Cluster Membership"
                                ],
                                "numRows": 10,
                                "numColumns": 5,
                                "hiddenColumns": [],
                                "minValues": [
                                    0.40004359675221457,
                                    0.6401706115373041,
                                    0.006173795871952992,
                                    0.11414535175845997,
                                    "Cluster_0"
                                ],
                                "maxValues": [
                                    0.7885046024667687,
                                    0.9844293666506339,
                                    0.8783522788839747,
                                    0.9644769137599531,
                                    "Cluster_0"
                                ],
                                "rowColorValues": [
                                    "#404040",
                                    "#404040",
                                    "#404040",
                                    "#404040",
                                    "#404040",
                                    "#404040",
                                    "#404040",
                                    "#404040",
                                    "#404040",
                                    "#404040"
                                ],
                                "rowSizeValues": null,
                                "containsMissingValues": [
                                    false,
                                    false,
                                    false,
                                    false,
                                    false
                                ],
                                "colTypes": [
                                    "number",
                                    "number",
                                    "number",
                                    "number",
                                    "string"
                                ],
                                "knimeTypes": [
                                    "Number (double)",
                                    "Number (double)",
                                    "Number (double)",
                                    "Number (double)",
                                    "String"
                                ],
                                "numExtensions": 0,
                                "extensionTypes": [],
                                "extensionNames": [],
                                "colorModels": [],
                                "filterIds": [
                                    null,
                                    null,
                                    null,
                                    null,
                                    null
                                ]
                            },
                            "filtered": false,
                            "fragmentFirstRowIndex": 0,
                            "totalFilteredRows": 0,
                            "totalRows": 0,
                            "dataHash": null,
                            "fragment": false,
                            "id": "b14bc8c9-933b-4669-a841-e0f1228050d5",
                            "rows": [
                                {
                                    "rowKey": "Row0",
                                    "data": [
                                        0.5686903241298604,
                                        0.8960940890165436,
                                        0.24070607075691486,
                                        0.9278065710595771,
                                        "Cluster_0"
                                    ]
                                },
                                {
                                    "rowKey": "Row1",
                                    "data": [
                                        0.7028594770666305,
                                        0.8248485135229193,
                                        0.8783522788839747,
                                        0.6165057060113005,
                                        "Cluster_0"
                                    ]
                                },
                                {
                                    "rowKey": "Row2",
                                    "data": [
                                        0.40004359675221457,
                                        0.7091295216074099,
                                        0.6862925846072621,
                                        0.39855647767975033,
                                        "Cluster_0"
                                    ]
                                },
                                {
                                    "rowKey": "Row3",
                                    "data": [
                                        0.6853967392937195,
                                        0.8631100002815463,
                                        0.006173795871952992,
                                        0.6027098023666071,
                                        "Cluster_0"
                                    ]
                                },
                                {
                                    "rowKey": "Row4",
                                    "data": [
                                        0.5062623801640109,
                                        0.8302306318786901,
                                        0.7183182831451684,
                                        0.42552605328953963,
                                        "Cluster_0"
                                    ]
                                },
                                {
                                    "rowKey": "Row5",
                                    "data": [
                                        0.5807869077740392,
                                        0.6401706115373041,
                                        0.812188861846222,
                                        0.9276315676192625,
                                        "Cluster_0"
                                    ]
                                },
                                {
                                    "rowKey": "Row6",
                                    "data": [
                                        0.7885046024667687,
                                        0.8072762908520312,
                                        0.2001403397994601,
                                        0.8298707051543049,
                                        "Cluster_0"
                                    ]
                                },
                                {
                                    "rowKey": "Row7",
                                    "data": [
                                        0.569619200741428,
                                        0.7679637733537583,
                                        0.10260319423135889,
                                        0.9644769137599531,
                                        "Cluster_0"
                                    ]
                                },
                                {
                                    "rowKey": "Row8",
                                    "data": [
                                        0.7218977955976967,
                                        0.9844293666506339,
                                        0.08172613436305964,
                                        0.11414535175845997,
                                        "Cluster_0"
                                    ]
                                },
                                {
                                    "rowKey": "Row9",
                                    "data": [
                                        0.7644927752466962,
                                        0.8841319797862421,
                                        0.08589504477820187,
                                        0.8426075091769384,
                                        "Cluster_0"
                                    ]
                                }
                            ]
                        }
                    ],
                    "tableIds": [
                        null
                    ],
                    "warnMessage": "One or more of the columns chosen are duplicated. This may affect the initial appearance of the view. If this was unintentional, please be sure to change the node settings either in the configuration dialog or in the view itself.\nOnly the first 10 rows are displayed.",
                    "binaryFiles": {},
                    "jsDependencies": [
                        {
                            "path": "js-lib/moment/2_17/timezone/moment-timezone-with-data.min.js",
                            "local": true,
                            "usesDefine": false,
                            "exports": "moment",
                            "dependencies": [
                                "moment_locales_2_17"
                            ],
                            "name": "Moment"
                        },
                        {
                            "path": "js-lib/moment/2_17/locales/moment-with-locales.min.js",
                            "local": true,
                            "usesDefine": false,
                            "exports": null,
                            "dependencies": [],
                            "name": "moment_locales_2_17"
                        },
                        {
                            "path": "js-lib/plotly/1.47.4/plotly.min.js",
                            "local": true,
                            "usesDefine": false,
                            "exports": "Plotly",
                            "dependencies": [],
                            "name": "Plotly"
                        }
                    ],
                    "cssDependencies": [],
                    "jsNamespace": "knimeBubbleChart",
                    "jsCode": [
                        "!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"\",n(n.s=46)}([function(t,e,n){var r=n(17)(\"wks\"),i=n(14),o=n(1).Symbol,s=\"function\"==typeof o;(t.exports=function(t){return r[t]||(r[t]=s&&o[t]||(s?o:i)(\"Symbol.\"+t))}).store=r},function(t,e){var n=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(7);t.exports=function(t){if(!r(t))throw TypeError(t+\" is not an object!\");return t}},function(t,e,n){var r=n(6),i=n(18);t.exports=n(8)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(3),i=n(33),o=n(23),s=Object.defineProperty;e.f=n(8)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return s(t,e,n)}catch(t){}if(\"get\"in n||\"set\"in n)throw TypeError(\"Accessors not supported!\");return\"value\"in n&&(t[e]=n.value),t}},function(t,e){t.exports=function(t){return\"object\"==typeof t?null!==t:\"function\"==typeof t}},function(t,e,n){t.exports=!n(2)((function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(1),i=n(13),o=n(4),s=n(10),c=n(50),u=function(t,e,n){var a,l,f,h,p=t&u.F,d=t&u.G,v=t&u.S,y=t&u.P,g=t&u.B,m=d?r:v?r[e]||(r[e]={}):(r[e]||{}).prototype,b=d?i:i[e]||(i[e]={}),S=b.prototype||(b.prototype={});for(a in d&&(n=e),n)f=((l=!p&&m&&void 0!==m[a])?m:n)[a],h=g&&l?c(f,r):y&&\"function\"==typeof f?c(Function.call,f):f,m&&s(m,a,f,t&u.U),b[a]!=f&&o(b,a,h),y&&S[a]!=f&&(S[a]=f)};r.core=i,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},function(t,e,n){var r=n(1),i=n(4),o=n(5),s=n(14)(\"src\"),c=n(49),u=(\"\"+c).split(\"toString\");n(13).inspectSource=function(t){return c.call(t)},(t.exports=function(t,e,n,c){var a=\"function\"==typeof n;a&&(o(n,\"name\")||i(n,\"name\",e)),t[e]!==n&&(a&&(o(n,s)||i(n,s,t[e]?\"\"+t[e]:u.join(String(e)))),t===r?t[e]=n:c?t[e]?t[e]=n:i(t,e,n):(delete t[e],i(t,e,n)))})(Function.prototype,\"toString\",(function(){return\"function\"==typeof this&&this[s]||c.call(this)}))},function(t,e,n){var r=n(53),i=n(20);t.exports=function(t){return r(i(t))}},function(t,e,n){var r=n(20);t.exports=function(t){return Object(r(t))}},function(t,e){var n=t.exports={version:\"2.6.10\"};\"number\"==typeof __e&&(__e=n)},function(t,e){var n=0,r=Math.random();t.exports=function(t){return\"Symbol(\".concat(void 0===t?\"\":t,\")_\",(++n+r).toString(36))}},function(t,e,n){var r=n(35),i=n(27);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e){t.exports=!1},function(t,e,n){var r=n(13),i=n(1),o=i[\"__core-js_shared__\"]||(i[\"__core-js_shared__\"]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})(\"versions\",[]).push({version:r.version,mode:n(16)?\"pure\":\"global\",copyright:\"© 2019 Denis Pushkarev (zloirock.ru)\"})},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(null==t)throw TypeError(\"Can't call method on  \"+t);return t}},function(t,e,n){var r=n(22),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(7);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&\"function\"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if(\"function\"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&\"function\"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError(\"Can't convert object to primitive value\")}},function(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(t+\" is not a function!\");return t}},function(t,e,n){var r=n(6).f,i=n(5),o=n(0)(\"toStringTag\");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e,n){var r=n(17)(\"keys\"),i=n(14);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,e){t.exports=\"constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf\".split(\",\")},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){\"use strict\";var r,i,o=n(66),s=RegExp.prototype.exec,c=String.prototype.replace,u=s,a=(r=/a/,i=/b*/g,s.call(r,\"a\"),s.call(i,\"a\"),0!==r.lastIndex||0!==i.lastIndex),l=void 0!==/()??/.exec(\"\")[1];(a||l)&&(u=function(t){var e,n,r,i,u=this;return l&&(n=new RegExp(\"^\"+u.source+\"$(?!\\\\s)\",o.call(u))),a&&(e=u.lastIndex),r=s.call(u,t),a&&r&&(u.lastIndex=u.global?r.index+r[0].length:e),l&&r&&r.length>1&&c.call(r[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)})),r}),t.exports=u},function(t,e){t.exports={}},function(t,e,n){var r=n(1),i=n(13),o=n(16),s=n(32),c=n(6).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});\"_\"==t.charAt(0)||t in e||c(e,t,{value:s.f(t)})}},function(t,e,n){e.f=n(0)},function(t,e,n){t.exports=!n(8)&&!n(2)((function(){return 7!=Object.defineProperty(n(34)(\"div\"),\"a\",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(7),i=n(1).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e,n){var r=n(5),i=n(11),o=n(54)(!1),s=n(26)(\"IE_PROTO\");t.exports=function(t,e){var n,c=i(t),u=0,a=[];for(n in c)n!=s&&r(c,n)&&a.push(n);for(;e.length>u;)r(c,n=e[u++])&&(~o(a,n)||a.push(n));return a}},function(t,e,n){var r=n(22),i=Math.max,o=Math.min;t.exports=function(t,e){return(t=r(t))<0?i(t+e,0):o(t,e)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(3),i=n(56),o=n(27),s=n(26)(\"IE_PROTO\"),c=function(){},u=function(){var t,e=n(34)(\"iframe\"),r=o.length;for(e.style.display=\"none\",n(57).appendChild(e),e.src=\"javascript:\",(t=e.contentWindow.document).open(),t.write(\"<script>document.F=Object<\\/script>\"),t.close(),u=t.F;r--;)delete u.prototype[o[r]];return u()};t.exports=Object.create||function(t,e){var n;return null!==t?(c.prototype=r(t),n=new c,c.prototype=null,n[s]=t):n=u(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(35),i=n(27).concat(\"length\",\"prototype\");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e,n){\"use strict\";var r=n(65)(!0);t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},function(t,e,n){\"use strict\";var r=n(42),i=RegExp.prototype.exec;t.exports=function(t,e){var n=t.exec;if(\"function\"==typeof n){var o=n.call(t,e);if(\"object\"!=typeof o)throw new TypeError(\"RegExp exec method returned something other than an Object or null\");return o}if(\"RegExp\"!==r(t))throw new TypeError(\"RegExp#exec called on incompatible receiver\");return i.call(t,e)}},function(t,e,n){var r=n(19),i=n(0)(\"toStringTag\"),o=\"Arguments\"==r(function(){return arguments}());t.exports=function(t){var e,n,s;return void 0===t?\"Undefined\":null===t?\"Null\":\"string\"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:o?r(e):\"Object\"==(s=r(e))&&\"function\"==typeof e.callee?\"Arguments\":s}},function(t,e,n){\"use strict\";n(67);var r=n(10),i=n(4),o=n(2),s=n(20),c=n(0),u=n(29),a=c(\"species\"),l=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:\"7\"},t},\"7\"!==\"\".replace(t,\"$<a>\")})),f=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n=\"ab\".split(t);return 2===n.length&&\"a\"===n[0]&&\"b\"===n[1]}();t.exports=function(t,e,n){var h=c(t),p=!o((function(){var e={};return e[h]=function(){return 7},7!=\"\"[t](e)})),d=p?!o((function(){var e=!1,n=/a/;return n.exec=function(){return e=!0,null},\"split\"===t&&(n.constructor={},n.constructor[a]=function(){return n}),n[h](\"\"),!e})):void 0;if(!p||!d||\"replace\"===t&&!l||\"split\"===t&&!f){var v=/./[h],y=n(s,h,\"\"[t],(function(t,e,n,r,i){return e.exec===u?p&&!i?{done:!0,value:v.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}})),g=y[0],m=y[1];r(String.prototype,t,g),i(RegExp.prototype,h,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)})}}},function(t,e,n){var r=n(0)(\"unscopables\"),i=Array.prototype;null==i[r]&&n(4)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,e,n){\"use strict\";var r=n(44),i=n(72),o=n(30),s=n(11);t.exports=n(73)(Array,\"Array\",(function(t,e){this._t=s(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):i(0,\"keys\"==e?n:\"values\"==e?t[n]:[n,t[n]])}),\"values\"),o.Arguments=o.Array,r(\"keys\"),r(\"values\"),r(\"entries\")},function(t,e,n){var r,i;r=[n(47),n(48),n(60),n(62),n(68),n(70),n(71),n(45),n(76),n(77)],void 0===(i=function(t,e,n,r,i,o,s,c,u,a){\"use strict\";function l(t){return(l=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t})(t)}window.KnimePlotlyInterface=function(){var t,e,n,r;Object.keys||(Object.keys=(t=Object.prototype.hasOwnProperty,e=!{toString:null}.propertyIsEnumerable(\"toString\"),r=(n=[\"toString\",\"toLocaleString\",\"valueOf\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"constructor\"]).length,function(i){if(\"function\"!=typeof i&&(\"object\"!==l(i)||null===i))throw new TypeError(\"Object.keys called on non-object\");var o,s=[];for(o in i)t.call(i,o)&&s.push(o);if(e)for(var c=0;c<r;c++)t.call(i,n[c])&&s.push(n[c]);return s}));var i={version:\"1.0.1\",initialize:function(t,e,n,r){var i=this;this.supportsWebGl=this.checkWebGlInBrowser(),this.selectionOutKey=window.dynamicJSNode.APPEND_SELECTION_GLOBAL_OUT_VALUE_KEY,this.representation=t,this.value=e,this.table=n,void 0===r[2]?this.Plotly=r[0]:(this.moment=r[0],this.Plotly=r[2]),this.table.setDataTable(this.representation.inObjects[0]),this.columns=n.getColumnNames(),this.rowColors=n.getRowColors(),this.rowDirectory={},this.filtered=new this.KSet([]),this.selected=new this.KSet([]),this.traceDirectory=[],this.changeObjKeys=[],this.orderedIndicies=[],this.totalRows=0,this.totalSelected=0,this.isOrdered=!1,this.showOnlySelected=!1,this.isSurface=!1,this.rotatedTicks=!1,this.onlySelectedBehavior=\"normal\",this.lastSOSState=!1,this.mValues=\"Skip rows with missing values\"===e.options.mValues.replace(/\\s/g,\" \")?0:1,this.mRows=new this.KSet([]),this.data={rowKeys:[],rowColors:[]},this.columns.forEach((function(t){i.data[t]=[]})),this.representation.options.overrideColors&&(this.rowColors=[]);var o=n.getRows();return o.forEach((function(e,n){var r=!1,s=0;if(e.data.forEach((function(n,o){r||(null!==n||(t.options.reportMissing&&i.mRows.add(e.rowKey),0!==i.mValues)?(s++,i.data[i.columns[o]].push(n)):r=!0)})),r)for(var c=0;c<s;c++)i.data[i.columns[c]].splice(i.data[i.columns[c]].length-1,1);else(i.rowColors.length<o.length||i.representation.options.overrideColors)&&i.rowColors.push(i.representation.options.dataColor),i.rowDirectory[e.rowKey]={tInds:[],pInd:i.data.rowColors.push(i.rowColors[n])-1},i.data.rowKeys.push(e.rowKey),i.filtered.add(e.rowKey),i.totalRows++})),t.options.reportMissing&&this.mRows.size()>0&&e.options.showWarnings&&(0===i.mValues?knimeService.setWarningMessage(\"There were missing values in this dataset. They have been removed from the  results. Total rows with missing values (removed): \"+this.mRows.size()):knimeService.setWarningMessage(\"There are missing values in this dataset! Total rows with missing values: \"+this.mRows.size()+\". Please use caution when interpreting results.\")),this.collectGarbage(),this},drawChart:function(t,e,n){this.representation.options.enableGL&&(this.supportsWebGl?this.representation.runningInView&&t.forEach((function(t){t.type&&(t.type+=\"gl\")})):this.value.options.showWarnings&&knimeService.setWarningMessage('Option \"Use WebGL graphic library\" was selected but this browser does not support WebGL. Falling back to SVG rendering!',\"WEB_GL_WARNING\")),this.indexTraces(t);var r=e;if(t[0]&&t[0].y&&(r=this.updateTicks(t[0],e)),!this.representation.options.enableSelection){void 0===n.modeBarButtonsToRemove&&(n.modeBarButtonsToRemove=[]);[\"lasso2d\",\"select2d\"].forEach((function(t){n.modeBarButtonsToRemove.push(t)}))}this.Plotly.newPlot(this.divID,t,r,n),this.value.outColumns&&this.value.outColumns.selection&&this.value.outColumns.selection[this.selectionOutKey]&&(this.totalSelected=this.value.outColumns.selection[this.selectionOutKey].length,this.selected=new this.KSet(this.value.outColumns.selection[this.selectionOutKey]),this.update())},getSVG:function(){var t=this,e=this.representation.options.svg.height,n=this.representation.options.svg.width;document.querySelectorAll(\".xy\").forEach((function(e){e.childNodes.forEach((function(e){e.style.fill=t.representation.options.backgroundColor}))}));var r=document.querySelectorAll(\".xy2\");r&&r.length&&r.length>0&&r.forEach((function(e){e.childNodes.forEach((function(e){e.style.fill=t.representation.options.backgroundColor}))}));var i=document.querySelectorAll(\".x2y\");i&&i.length&&i.length>0&&i.forEach((function(e){e.childNodes.forEach((function(e){e.style.fill=t.representation.options.backgroundColor}))}));var o=document.querySelector(\".polarsublayer\");o&&o.children.length&&o.children.length>0&&o.childNodes.forEach((function(e){e.style.fill=t.representation.options.backgroundColor}));var s=document.querySelectorAll(\"#\"+this.divID+\"> div > div > svg\"),c='<svg class=\"main-svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"'+n+'\" height=\"'+e+'\">\"><g xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"'+n+'\" height=\"'+e+'\" style=\"fill: '+this.representation.options.backgroundColor+\";width:\"+n+\"px;height:\"+e+'px\"></rect></g>';return s.forEach((function(t,e){\"svg\"===t.tagName&&(knimeService.inlineSvgStyles(t),c+=(new XMLSerializer).serializeToString(t))})),c+=\"</svg>\"},getComponentValue:function(){var t,e,n,r=this;return this.value.outColumns={selection:(t={},e=r.selectionOutKey,n=[],e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t)},Object.keys(this.rowDirectory).forEach((function(t){r.selected.has(t)&&r.value.outColumns.selection[r.selectionOutKey].push(t)})),delete this.value.options.selectedrows,this.value},setIsSurface:function(t){this.isSurface=t},setOnlySelectedBehavior:function(t){this.onlySelectedBehavior=t},createElement:function(t){this.divID=t;var e=document.createElement(\"div\");if(this.representation.options.svg&&(!this.representation.options.svg.fullscreen||!this.representation.runningInView)){var n=\"width:\"+this.representation.options.svg.width+\"px;height:\"+this.representation.options.svg.height+\"px\";e.setAttribute(\"style\",n)}e.setAttribute(\"id\",t),document.body.appendChild(e)},getData:function(t){var e=this;this.changeKeys||this.updateKeys(t);var n=new this.KSet(t.dataKeys).getArray(),r=[],i={},o={names:[],rowKeys:[]};n.forEach((function(t){o[t]=[]}));var s=0;return this.representation.options.groupByColumn&&\"none\"!==this.representation.options.groupByColumn?e.data[this.representation.options.groupByColumn].forEach((function(t,e){void 0===i[t]?(i[t]=s,r.push(s),n.forEach((function(t){o[t].push([])})),o.names.push(t||\"Missing\"),s++):r.push(i[t])})):(r=this.data.rowKeys.map((function(t,e){return 0})),n.forEach((function(t){o[t].push([]),e.data[t]||(e.data[t]=r.map((function(){return\"Data Set\"})))})),o.names.push([\"Data\"])),r.forEach((function(t,r){n.forEach((function(n){e.data[n]&&o[n][t].push(e.data[n][r])}))})),this.isOrdered&&o.rowKeys.forEach((function(t,r){n.forEach((function(t){o[t][r]=e.getOrderedArray(o[t][r])}))})),o},indexTraces:function(t){var e=this;this.traceDirectory=[],t.forEach((function(t,n){t.ids.forEach((function(t){e.rowDirectory[t].tInds.push(n)})),e.traceDirectory[n]=new e.TraceMap(t.ids),e.traceDirectory[n].dataKeys=t.dataKeys}))},getSelectedPoints:function(){var t=this,e=[];return this.traceDirectory.forEach((function(){var n=t.totalSelected>0?[]:null;e.push(n)})),this.selected.getArray().forEach((function(n){t.rowDirectory[n].tInds.forEach((function(r){t.traceDirectory[r][n]>-1&&e[r].push(t.traceDirectory[r][n])}))})),e},getFilteredChangeObject:function(t){var e=this,n={},r=t?t.plotlyKeys:this.changeObjKeys;if(r.forEach((function(t){t.forEach((function(t){n[t]=[],e.traceDirectory.forEach((function(){n[t].push([])}))}))})),e.isOrdered){var i=this.getOrderedArray(this.data.rowKeys),o=0;e.traceDirectory.forEach((function(t,s){i.forEach((function(i,c){if(void 0!==t[i])if(e.showOnlySelected&&!e.selected.has(i)||!e.filtered.has(i))e.traceDirectory[s][i]=-1;else{var u=n.z||[[]];t.dataKeys.forEach((function(a,l){e.isSurface&&l<2?0===l?(u[0][o]=e.data[a][e.orderedIndicies[c]],t[i]=o):(a.forEach((function(t,n){var r=u[n]||[];r[o]=e.data[t][e.orderedIndicies[c]],u[n]=r})),n.z=u):r[l].forEach((function(r){t[i]=n[r][s].push(e.data[a][e.orderedIndicies[c]])-1}))})),o++}}))}))}else this.data.rowKeys.forEach((function(t,i){var o=e.rowDirectory[t];o.tInds.forEach((function(i){e.showOnlySelected&&!e.selected.has(t)||!e.filtered.has(t)?e.traceDirectory[i][t]=-1:e.traceDirectory[i].dataKeys&&e.traceDirectory[i].dataKeys.forEach((function(s,c){s?r[c].forEach((function(r){var c=n[r][i].push(e.data[s][o.pInd])-1;e.traceDirectory[i][t]=c})):r[c].forEach((function(t){n[t][i]=null}))}))}))}));return this.isSurface?n.z=[n.z]:n.selectedpoints=this.getSelectedPoints(),n},update:function(t,e,n){if(n&&e)this.Plotly.relayout(this.divID,e);else{var r=t||this.getFilteredChangeObject();(e=this.updateTicks(r,e))?this.Plotly.update(this.divID,r,e):this.Plotly.restyle(this.divID,r)}},updateKeys:function(t){var e=this;t.plotlyKeys&&(this.changeObjKeys=t.plotlyKeys),t.dataKeys&&e.traceDirectory&&t.dataKeys.forEach((function(t,n){t&&(t.length&&Array.isArray(t)?t.forEach((function(t,r){e.traceDirectory[r].dataKeys[n]=t})):e.traceDirectory.forEach((function(e){e.dataKeys[n]&&(e.dataKeys[n]=t)})))}))},updateValue:function(t){for(var e in t)this.value.options[e]=t[e]},updateSelected:function(t){var e=this;if(t){if(this.selected=new this.KSet([]),this.totalSelected=0,t.points)t.range&&(t.range.x2||t.range.y2||t.points.length&&t.points[0]&&t.points[0].r)?t.points.forEach((function(t){var n=t.fullData.ids;(t.pointIndices||[t.pointIndex]).forEach((function(t){var r=n[t];e.selected.add(r),e.totalSelected++}))})):t.points.forEach((function(t){e.selected.add(t.id),e.totalSelected++})),e.value.options.publishSelection&&knimeService.getGlobalService()&&knimeService.setSelectedRows(this.table.getTableId(),this.selected.getArray(),this.onSelectionChange);else{this.selected=new this.KSet([]);var n=knimeService.getAllRowsForSelection(this.table.getTableId());n.length>0&&(this.totalSelected=1),n.forEach((function(t){void 0!==e.rowDirectory[t]&&(e.selected.add(t),e.totalSelected++)}))}0===e.totalSelected&&e.showOnlySelected&&\"violin\"===e.onlySelectedBehavior?(e.showOnlySelected=!1,e.lastSOSState=!0):e.totalSelected>0&&e.lastSOSState&&\"violin\"===e.onlySelectedBehavior&&(e.showOnlySelected=!0),this.updateValue({selectedrows:e.selected.getArray()})}},updateFilter:function(t){if(t&&t.elements){var e=this;this.filtered=new this.KSet([]),t.elements.forEach((function(t,n){if(\"range\"===t.type&&t.columns)for(var r=0;r<t.columns.length;r++){var i=t.columns[r];e.data[i.columnName].forEach((function(t,r){if(null!=t){var o=!0,s=e.data.rowKeys[r];if(\"numeric\"===i.type?(o=i.minimumInclusive?o&&t>=i.minimum:o&&t>i.minimum,o=i.maximumInclusive?o&&t<=i.maximum:o&&t<i.maximum):\"nominal\"===i.type&&(o=o&&i.values.indexOf(t)>=0),o){if(n>0&&!e.filtered.has(s))return;e.filtered.add(s)}else e.filtered.has(s)&&e.filtered.delete(s)}}))}}))}},updateOrderedIndicies:function(t){var e=this;this.isOrdered=!0;var n=e.data[t];if(\"string\"==typeof n[0])if(-1!==n[0].indexOf(\"Row\")){var r=!1;if(n=n.map((function(t){var e=parseFloat(t.split(\"Row\")[1]);return isNaN(e)&&(r=!0),e})),r)return void(e.orderedIndicies=n.map((function(t,e){return e})))}else{if(\"dateTime\"!==this.table.getColumnTypes()[this.columns.indexOf(t)]||!this.representation.options.hasDateTime)return void(e.orderedIndicies=n.map((function(t,e){return e})));this.moment(n[0].isValid())&&(n=n.map((function(t){return e.moment(t).valueOf()})))}for(var i=[],o=0;o<n.length;o++)i.push(o);var s=function t(e,n){if(e.length<=1)return[e,n];var r=Math.floor(e.length/2),i=e.slice(0,r),o=e.slice(r),s=n.slice(0,r),c=n.slice(r);return function(t,e){for(var n=[],r=[],i=0,o=0;i<t[0].length&&o<e[0].length;)t[0][i]<e[0][o]?(n.push(t[0][i]),r.push(t[1][i]),i++):(n.push(e[0][o]),r.push(e[1][o]),o++);return[n.concat(t[0].slice(i)).concat(e[0].slice(o)),r.concat(t[1].slice(i)).concat(e[1].slice(o))]}(t(i,s),t(o,c))}(n,i);e.orderedIndicies=s[1]},getOrderedArray:function(t){for(var e=[],n=0;n<t.length;n++)e[n]=t[this.orderedIndicies[n]];return e.filter((function(t){return 0===t||t}))},updateShowOnlySelected:function(t){this.showOnlySelected=t},mountAndSubscribe:function(t,e){var n=this,r=this.removeSecondAxisElements();this.adjustTitleSpacing(),document.getElementById(this.divID).on(\"plotly_relayout\",(function(t){if(t){r&&n.removeSecondAxisElements();var e={};t[\"xaxis.title.text\"]&&(e.xAxisLabel=t[\"xaxis.title.text\"]),t[\"yaxis.title.text\"]&&(e.yAxisLabel=t[\"yaxis.title.text\"]),t[\"title.text\"]&&(e.title=t[\"title.text\"]),n.updateValue(e)}n.adjustTitleSpacing()})),document.getElementById(this.divID).on(\"plotly_restyle\",(function(t){if(t&&t.length&&t[0]&&t[0].colorscale&&t[0].colorscale.length){var e={colorscale:t[0].colorscale[0]};n.updateValue(e)}n.adjustTitleSpacing()})),document.getElementById(this.divID).on(\"plotly_selected\",(function(e){t(e),n.adjustTitleSpacing()})),document.getElementById(this.divID).on(\"plotly_deselect\",(function(){t({points:[]}),n.adjustTitleSpacing()})),this.togglePublishSelection(),this.toggleSubscribeToFilters(e),this.toggleSubscribeToSelection(t)},updateTicks:function(t,e){var n=e;return t.y&&t.y.length>0&&t.y[0]&&t.y[0].length&&(\"string\"==typeof t.y[0][0]?((n=n||{}).yaxis?n.yaxis.tickangle=-90:n[\"yaxis.tickangle\"]=-90,this.rotatedTicks=!0):this.rotatedTicks&&\"number\"==typeof t.y[0][0]&&((n=n||{}).yaxis?n.yaxis.tickangle=-0:n[\"yaxis.tickangle\"]=-0,this.rotatedTicks=!0)),n},adjustTitleSpacing:function(){document.querySelector(\".gtitle\")&&document.querySelector(\".gtitle\").setAttribute(\"dy\",\"-.5em\")},removeSecondAxisElements:function(){var t=document.querySelector(\".x2title\"),e=document.querySelector(\".y2title\");return!(!t||!e)&&(t.remove(),e.remove(),!0)},toggleSubscribeToFilters:function(t){this.value.options.subscribeToFilters?knimeService.subscribeToFilter(this.table.getTableId(),t,this.table.getFilterIds()):knimeService.unsubscribeFilter(this.table.getTableId(),t)},toggleSubscribeToSelection:function(t){this.value.options.subscribeToSelection?knimeService.subscribeToSelection(this.table.getTableId(),t):knimeService.unsubscribeSelection(this.table.getTableId(),t)},togglePublishSelection:function(){this.value.options.publishSelection&&knimeService.setSelectedRows(this.table.getTableId(),this.selected.getArray())},TraceMap:function(t){for(var e=0;e<t.length;e++)this[t[e]]=e},KMap:function(t){var e={},n=[],r=[],i=0;if(t&&t.length)for(var o=0;o<t.length;o++)void 0!==t[o][0]&&(this.set(t[o][0],t[o][1]),i++);this.set=function(t,o){if(this.has(t))e[t].value=o;else{var s=n.push(t);r.push(o),e[t]={value:o,ind:s},i++}return this},this.has=function(t){return void 0!==e[t]},this.clear=function(){return e={},n=[],r=[],i=0,this},this.get=function(t){return e[t].value},this.delete=function(t){return void 0!==e[t]&&(n.splice(e[t].ind,1,null),r.splice(e[t].ind,1,null),delete this.obj[t],i--,!0)},this.entries=function(){for(var t=[],e=0;e<r.length;e++)n[e]&&t.push([n[e],r[e]])},this.keys=function(){return n.filter((function(t){return t}))},this.values=function(){return r.filter((function(t){return t}))},this.size=function(){return i}},KSet:function(t){var e={},n=0;if(t&&t.length)for(var r=0;r<t.length;r++)e[t[r]]=!0;this.add=function(t){return void 0!==t&&(this.has(t)||n++,e[t]=!0),this},this.addAll=function(t){if(t&&t.length)for(var r=0;r<t.length;r++)void 0!==t[r]&&(e[t[r]]=!0,n++);return this},this.has=function(t){return!0===e[t]},this.delete=function(t){return this.has(t)&&(e[t]=!1,delete e[t],n--),this},this.clear=function(){return e={},n=0,this},this.size=function(){return n},this.getArray=function(){var t=[];for(var n in e)n&&t.push(n);return t}},hexToRGBA:function(t,e){return e||(e=1),\"rgba(\"+parseInt(t.slice(1,3),16)+\", \"+parseInt(t.slice(3,5),16)+\", \"+parseInt(t.slice(5,7),16)+\", \"+e+\")\"},getNumericColumns:function(){var t=this.table.getColumnNames(),e=this.table.getColumnTypes();return t.filter((function(t,n){return\"number\"===e[n]}))},getXYCartesianColsWDate:function(t){var e=this.table.getColumnNames(),n=this.table.getKnimeColumnTypes(),r=[\"Number (integer)\",\"Number (long)\",\"Number (double)\",\"Date and Time\",\"String\",\"Local Date\",\"Local Time\",\"Local Date Time\",\"Zoned Date Time\",\"Period\",\"Duration\"],i=e.filter((function(t,e){return r.indexOf(n[e])>-1}));return t&&i.push(\"rowKeys\"),i},getXYCartesianColsWODate:function(t){var e=this.table.getColumnNames(),n=this.table.getKnimeColumnTypes(),r=[\"Number (integer)\",\"Number (long)\",\"Number (double)\",\"String\"],i=e.filter((function(t,e){return r.indexOf(n[e])>-1}));return t&&i.push(\"rowKeys\"),i},getMostFrequentColor:function(t){return t.sort((function(e,n){return t.filter((function(t){return t===e})).length-t.filter((function(t){return t===n}))})).pop()},collectGarbage:function(){this.representation.inObjects[0].rows=null,this.table.setDataTable(this.representation.inObjects[0])},checkWebGlInBrowser:function(){var t,e=\"svg\"===document.documentElement.nodeName.toLowerCase(),n=!1,r=!1,i=\"probablySupportsContext\"in(t=\"function\"!=typeof document.createElement?document.createElement(\"canvas\"):e?document.createElementNS.call(document,\"http://www.w3.org/2000/svg\",\"canvas\"):document.createElement(\"canvas\"))?\"probablySupportsContext\":\"supportsContext\";n=i in t?Boolean(t[i](\"webgl\")||t[i](\"experimental-webgl\")):\"WebGLRenderingContext\"in window;try{r=Boolean(!!window.WebGLRenderingContext&&(t.getContext(\"webgl\")||t.getContext(\"experimental-webgl\")))}catch(t){}return n&&r}};return i}}.apply(e,r))||(t.exports=i)},function(t,e,n){n(31)(\"asyncIterator\")},function(t,e,n){\"use strict\";var r=n(1),i=n(5),o=n(8),s=n(9),c=n(10),u=n(51).KEY,a=n(2),l=n(17),f=n(25),h=n(14),p=n(0),d=n(32),v=n(31),y=n(52),g=n(55),m=n(3),b=n(7),S=n(12),x=n(11),w=n(23),O=n(18),E=n(38),T=n(58),I=n(59),j=n(37),C=n(6),k=n(15),P=I.f,D=C.f,K=T.f,A=r.Symbol,_=r.JSON,L=_&&_.stringify,N=p(\"_hidden\"),M=p(\"toPrimitive\"),R={}.propertyIsEnumerable,F=l(\"symbol-registry\"),B=l(\"symbols\"),G=l(\"op-symbols\"),V=Object.prototype,W=\"function\"==typeof A&&!!j.f,z=r.QObject,q=!z||!z.prototype||!z.prototype.findChild,$=o&&a((function(){return 7!=E(D({},\"a\",{get:function(){return D(this,\"a\",{value:7}).a}})).a}))?function(t,e,n){var r=P(V,e);r&&delete V[e],D(t,e,n),r&&t!==V&&D(V,e,r)}:D,U=function(t){var e=B[t]=E(A.prototype);return e._k=t,e},J=W&&\"symbol\"==typeof A.iterator?function(t){return\"symbol\"==typeof t}:function(t){return t instanceof A},Y=function(t,e,n){return t===V&&Y(G,e,n),m(t),e=w(e,!0),m(n),i(B,e)?(n.enumerable?(i(t,N)&&t[N][e]&&(t[N][e]=!1),n=E(n,{enumerable:O(0,!1)})):(i(t,N)||D(t,N,O(1,{})),t[N][e]=!0),$(t,e,n)):D(t,e,n)},H=function(t,e){m(t);for(var n,r=y(e=x(e)),i=0,o=r.length;o>i;)Y(t,n=r[i++],e[n]);return t},X=function(t){var e=R.call(this,t=w(t,!0));return!(this===V&&i(B,t)&&!i(G,t))&&(!(e||!i(this,t)||!i(B,t)||i(this,N)&&this[N][t])||e)},Q=function(t,e){if(t=x(t),e=w(e,!0),t!==V||!i(B,e)||i(G,e)){var n=P(t,e);return!n||!i(B,e)||i(t,N)&&t[N][e]||(n.enumerable=!0),n}},Z=function(t){for(var e,n=K(x(t)),r=[],o=0;n.length>o;)i(B,e=n[o++])||e==N||e==u||r.push(e);return r},tt=function(t){for(var e,n=t===V,r=K(n?G:x(t)),o=[],s=0;r.length>s;)!i(B,e=r[s++])||n&&!i(V,e)||o.push(B[e]);return o};W||(c((A=function(){if(this instanceof A)throw TypeError(\"Symbol is not a constructor!\");var t=h(arguments.length>0?arguments[0]:void 0),e=function(n){this===V&&e.call(G,n),i(this,N)&&i(this[N],t)&&(this[N][t]=!1),$(this,t,O(1,n))};return o&&q&&$(V,t,{configurable:!0,set:e}),U(t)}).prototype,\"toString\",(function(){return this._k})),I.f=Q,C.f=Y,n(39).f=T.f=Z,n(28).f=X,j.f=tt,o&&!n(16)&&c(V,\"propertyIsEnumerable\",X,!0),d.f=function(t){return U(p(t))}),s(s.G+s.W+s.F*!W,{Symbol:A});for(var et=\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),nt=0;et.length>nt;)p(et[nt++]);for(var rt=k(p.store),it=0;rt.length>it;)v(rt[it++]);s(s.S+s.F*!W,\"Symbol\",{for:function(t){return i(F,t+=\"\")?F[t]:F[t]=A(t)},keyFor:function(t){if(!J(t))throw TypeError(t+\" is not a symbol!\");for(var e in F)if(F[e]===t)return e},useSetter:function(){q=!0},useSimple:function(){q=!1}}),s(s.S+s.F*!W,\"Object\",{create:function(t,e){return void 0===e?E(t):H(E(t),e)},defineProperty:Y,defineProperties:H,getOwnPropertyDescriptor:Q,getOwnPropertyNames:Z,getOwnPropertySymbols:tt});var ot=a((function(){j.f(1)}));s(s.S+s.F*ot,\"Object\",{getOwnPropertySymbols:function(t){return j.f(S(t))}}),_&&s(s.S+s.F*(!W||a((function(){var t=A();return\"[null]\"!=L([t])||\"{}\"!=L({a:t})||\"{}\"!=L(Object(t))}))),\"JSON\",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(b(e)||void 0!==t)&&!J(t))return g(e)||(e=function(t,e){if(\"function\"==typeof n&&(e=n.call(this,t,e)),!J(e))return e}),r[1]=e,L.apply(_,r)}}),A.prototype[M]||n(4)(A.prototype,M,A.prototype.valueOf),f(A,\"Symbol\"),f(Math,\"Math\",!0),f(r.JSON,\"JSON\",!0)},function(t,e,n){t.exports=n(17)(\"native-function-to-string\",Function.toString)},function(t,e,n){var r=n(24);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r=n(14)(\"meta\"),i=n(7),o=n(5),s=n(6).f,c=0,u=Object.isExtensible||function(){return!0},a=!n(2)((function(){return u(Object.preventExtensions({}))})),l=function(t){s(t,r,{value:{i:\"O\"+ ++c,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!i(t))return\"symbol\"==typeof t?t:(\"string\"==typeof t?\"S\":\"P\")+t;if(!o(t,r)){if(!u(t))return\"F\";if(!e)return\"E\";l(t)}return t[r].i},getWeak:function(t,e){if(!o(t,r)){if(!u(t))return!0;if(!e)return!1;l(t)}return t[r].w},onFreeze:function(t){return a&&f.NEED&&u(t)&&!o(t,r)&&l(t),t}}},function(t,e,n){var r=n(15),i=n(37),o=n(28);t.exports=function(t){var e=r(t),n=i.f;if(n)for(var s,c=n(t),u=o.f,a=0;c.length>a;)u.call(t,s=c[a++])&&e.push(s);return e}},function(t,e,n){var r=n(19);t.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(t){return\"String\"==r(t)?t.split(\"\"):Object(t)}},function(t,e,n){var r=n(11),i=n(21),o=n(36);t.exports=function(t){return function(e,n,s){var c,u=r(e),a=i(u.length),l=o(s,a);if(t&&n!=n){for(;a>l;)if((c=u[l++])!=c)return!0}else for(;a>l;l++)if((t||l in u)&&u[l]===n)return t||l||0;return!t&&-1}}},function(t,e,n){var r=n(19);t.exports=Array.isArray||function(t){return\"Array\"==r(t)}},function(t,e,n){var r=n(6),i=n(3),o=n(15);t.exports=n(8)?Object.defineProperties:function(t,e){i(t);for(var n,s=o(e),c=s.length,u=0;c>u;)r.f(t,n=s[u++],e[n]);return t}},function(t,e,n){var r=n(1).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(11),i=n(39).f,o={}.toString,s=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return s&&\"[object Window]\"==o.call(t)?function(t){try{return i(t)}catch(t){return s.slice()}}(t):i(r(t))}},function(t,e,n){var r=n(28),i=n(18),o=n(11),s=n(23),c=n(5),u=n(33),a=Object.getOwnPropertyDescriptor;e.f=n(8)?a:function(t,e){if(t=o(t),e=s(e,!0),u)try{return a(t,e)}catch(t){}if(c(t,e))return i(!r.f.call(t,e),t[e])}},function(t,e,n){\"use strict\";var r=n(9),i=n(24),o=n(12),s=n(2),c=[].sort,u=[1,2,3];r(r.P+r.F*(s((function(){u.sort(void 0)}))||!s((function(){u.sort(null)}))||!n(61)(c)),\"Array\",{sort:function(t){return void 0===t?c.call(o(this)):c.call(o(this),i(t))}})},function(t,e,n){\"use strict\";var r=n(2);t.exports=function(t,e){return!!t&&r((function(){e?t.call(null,(function(){}),1):t.call(null)}))}},function(t,e,n){\"use strict\";var r=n(63),i=n(3),o=n(64),s=n(40),c=n(21),u=n(41),a=n(29),l=n(2),f=Math.min,h=[].push,p=\"length\",d=!l((function(){RegExp(4294967295,\"y\")}));n(43)(\"split\",2,(function(t,e,n,l){var v;return v=\"c\"==\"abbc\".split(/(b)*/)[1]||4!=\"test\".split(/(?:)/,-1)[p]||2!=\"ab\".split(/(?:ab)*/)[p]||4!=\".\".split(/(.?)(.?)/)[p]||\".\".split(/()()/)[p]>1||\"\".split(/.?/)[p]?function(t,e){var i=String(this);if(void 0===t&&0===e)return[];if(!r(t))return n.call(i,t,e);for(var o,s,c,u=[],l=(t.ignoreCase?\"i\":\"\")+(t.multiline?\"m\":\"\")+(t.unicode?\"u\":\"\")+(t.sticky?\"y\":\"\"),f=0,d=void 0===e?4294967295:e>>>0,v=new RegExp(t.source,l+\"g\");(o=a.call(v,i))&&!((s=v.lastIndex)>f&&(u.push(i.slice(f,o.index)),o[p]>1&&o.index<i[p]&&h.apply(u,o.slice(1)),c=o[0][p],f=s,u[p]>=d));)v.lastIndex===o.index&&v.lastIndex++;return f===i[p]?!c&&v.test(\"\")||u.push(\"\"):u.push(i.slice(f)),u[p]>d?u.slice(0,d):u}:\"0\".split(void 0,0)[p]?function(t,e){return void 0===t&&0===e?[]:n.call(this,t,e)}:n,[function(n,r){var i=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,i,r):v.call(String(i),n,r)},function(t,e){var r=l(v,t,this,e,v!==n);if(r.done)return r.value;var a=i(t),h=String(this),p=o(a,RegExp),y=a.unicode,g=(a.ignoreCase?\"i\":\"\")+(a.multiline?\"m\":\"\")+(a.unicode?\"u\":\"\")+(d?\"y\":\"g\"),m=new p(d?a:\"^(?:\"+a.source+\")\",g),b=void 0===e?4294967295:e>>>0;if(0===b)return[];if(0===h.length)return null===u(m,h)?[h]:[];for(var S=0,x=0,w=[];x<h.length;){m.lastIndex=d?x:0;var O,E=u(m,d?h:h.slice(x));if(null===E||(O=f(c(m.lastIndex+(d?0:x)),h.length))===S)x=s(h,x,y);else{if(w.push(h.slice(S,x)),w.length===b)return w;for(var T=1;T<=E.length-1;T++)if(w.push(E[T]),w.length===b)return w;x=S=O}}return w.push(h.slice(S)),w}]}))},function(t,e,n){var r=n(7),i=n(19),o=n(0)(\"match\");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[o])?!!e:\"RegExp\"==i(t))}},function(t,e,n){var r=n(3),i=n(24),o=n(0)(\"species\");t.exports=function(t,e){var n,s=r(t).constructor;return void 0===s||null==(n=r(s)[o])?e:i(n)}},function(t,e,n){var r=n(22),i=n(20);t.exports=function(t){return function(e,n){var o,s,c=String(i(e)),u=r(n),a=c.length;return u<0||u>=a?t?\"\":void 0:(o=c.charCodeAt(u))<55296||o>56319||u+1===a||(s=c.charCodeAt(u+1))<56320||s>57343?t?c.charAt(u):o:t?c.slice(u,u+2):s-56320+(o-55296<<10)+65536}}},function(t,e,n){\"use strict\";var r=n(3);t.exports=function(){var t=r(this),e=\"\";return t.global&&(e+=\"g\"),t.ignoreCase&&(e+=\"i\"),t.multiline&&(e+=\"m\"),t.unicode&&(e+=\"u\"),t.sticky&&(e+=\"y\"),e}},function(t,e,n){\"use strict\";var r=n(29);n(9)({target:\"RegExp\",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,e,n){var r=n(9);r(r.P,\"Array\",{fill:n(69)}),n(44)(\"fill\")},function(t,e,n){\"use strict\";var r=n(12),i=n(36),o=n(21);t.exports=function(t){for(var e=r(this),n=o(e.length),s=arguments.length,c=i(s>1?arguments[1]:void 0,n),u=s>2?arguments[2]:void 0,a=void 0===u?n:i(u,n);a>c;)e[c++]=t;return e}},function(t,e,n){\"use strict\";var r=n(3),i=n(12),o=n(21),s=n(22),c=n(40),u=n(41),a=Math.max,l=Math.min,f=Math.floor,h=/\\$([$&`']|\\d\\d?|<[^>]*>)/g,p=/\\$([$&`']|\\d\\d?)/g;n(43)(\"replace\",2,(function(t,e,n,d){return[function(r,i){var o=t(this),s=null==r?void 0:r[e];return void 0!==s?s.call(r,o,i):n.call(String(o),r,i)},function(t,e){var i=d(n,t,this,e);if(i.done)return i.value;var f=r(t),h=String(this),p=\"function\"==typeof e;p||(e=String(e));var y=f.global;if(y){var g=f.unicode;f.lastIndex=0}for(var m=[];;){var b=u(f,h);if(null===b)break;if(m.push(b),!y)break;\"\"===String(b[0])&&(f.lastIndex=c(h,o(f.lastIndex),g))}for(var S,x=\"\",w=0,O=0;O<m.length;O++){b=m[O];for(var E=String(b[0]),T=a(l(s(b.index),h.length),0),I=[],j=1;j<b.length;j++)I.push(void 0===(S=b[j])?S:String(S));var C=b.groups;if(p){var k=[E].concat(I,T,h);void 0!==C&&k.push(C);var P=String(e.apply(void 0,k))}else P=v(E,h,T,I,C,e);T>=w&&(x+=h.slice(w,T)+P,w=T+E.length)}return x+h.slice(w)}];function v(t,e,r,o,s,c){var u=r+t.length,a=o.length,l=p;return void 0!==s&&(s=i(s),l=h),n.call(c,l,(function(n,i){var c;switch(i.charAt(0)){case\"$\":return\"$\";case\"&\":return t;case\"`\":return e.slice(0,r);case\"'\":return e.slice(u);case\"<\":c=s[i.slice(1,-1)];break;default:var l=+i;if(0===l)return n;if(l>a){var h=f(l/10);return 0===h?n:h<=a?void 0===o[h-1]?i.charAt(1):o[h-1]+i.charAt(1):n}c=o[l-1]}return void 0===c?\"\":c}))}}))},function(t,e,n){for(var r=n(45),i=n(15),o=n(10),s=n(1),c=n(4),u=n(30),a=n(0),l=a(\"iterator\"),f=a(\"toStringTag\"),h=u.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var y,g=d[v],m=p[g],b=s[g],S=b&&b.prototype;if(S&&(S[l]||c(S,l,h),S[f]||c(S,f,g),u[g]=h,m))for(y in r)S[y]||o(S,y,r[y],!0)}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){\"use strict\";var r=n(16),i=n(9),o=n(10),s=n(4),c=n(30),u=n(74),a=n(25),l=n(75),f=n(0)(\"iterator\"),h=!([].keys&&\"next\"in[].keys()),p=function(){return this};t.exports=function(t,e,n,d,v,y,g){u(n,e,d);var m,b,S,x=function(t){if(!h&&t in T)return T[t];switch(t){case\"keys\":case\"values\":return function(){return new n(this,t)}}return function(){return new n(this,t)}},w=e+\" Iterator\",O=\"values\"==v,E=!1,T=t.prototype,I=T[f]||T[\"@@iterator\"]||v&&T[v],j=I||x(v),C=v?O?x(\"entries\"):j:void 0,k=\"Array\"==e&&T.entries||I;if(k&&(S=l(k.call(new t)))!==Object.prototype&&S.next&&(a(S,w,!0),r||\"function\"==typeof S[f]||s(S,f,p)),O&&I&&\"values\"!==I.name&&(E=!0,j=function(){return I.call(this)}),r&&!g||!h&&!E&&T[f]||s(T,f,j),c[e]=j,c[w]=p,v)if(m={values:O?j:x(\"values\"),keys:y?j:x(\"keys\"),entries:C},g)for(b in m)b in T||o(T,b,m[b]);else i(i.P+i.F*(h||E),e,m);return m}},function(t,e,n){\"use strict\";var r=n(38),i=n(18),o=n(25),s={};n(4)(s,n(0)(\"iterator\"),(function(){return this})),t.exports=function(t,e,n){t.prototype=r(s,{next:i(1,n)}),o(t,e+\" Iterator\")}},function(t,e,n){var r=n(5),i=n(12),o=n(26)(\"IE_PROTO\"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:\"function\"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},function(t,e,n){\"use strict\";var r=n(42),i={};i[n(0)(\"toStringTag\")]=\"z\",i+\"\"!=\"[object z]\"&&n(10)(Object.prototype,\"toString\",(function(){return\"[object \"+r(this)+\"]\"}),!0)},function(t,e,n){var r=n(12),i=n(15);n(78)(\"keys\",(function(){return function(t){return i(r(t))}}))},function(t,e,n){var r=n(9),i=n(13),o=n(2);t.exports=function(t,e){var n=(i.Object||{})[t]||Object[t],s={};s[t]=e(n),r(r.S+r.F*o((function(){n(1)})),\"Object\",s)}}]);",
                        "/* global kt:false, KnimePlotlyInterface:false */\nwindow.knimeBubbleChart = (function () {\n\n    var BubbleChart = {};\n\n    BubbleChart.init = function (representation, value) {\n\n        this.KPI = new KnimePlotlyInterface();\n        this.KPI.initialize(representation, value, new kt(), arguments[2]);\n        this.columns = this.KPI.getXYCartesianColsWDate(true);\n        this.numericColumns = this.KPI.getNumericColumns();\n        this.xAxisCol = this.KPI.value.options.xAxisColumn || 'rowKeys';\n        this.yAxisCol = this.KPI.value.options.yAxisColumn || 'rowKeys';\n        this.sizeCol = this.KPI.value.options.sizeColumn || this.columns[2];\n        this.onSelectionChange = this.onSelectionChange.bind(this);\n        this.onFilterChange = this.onFilterChange.bind(this);\n\n        this.drawChart();\n        this.drawKnimeMenu();\n        this.KPI.mountAndSubscribe(this.onSelectionChange, this.onFilterChange);\n    };\n\n    BubbleChart.drawChart = function () {\n        var gridColor = this.KPI.hexToRGBA(this.KPI.representation.options.gridColor, .15);\n        var t = this.createTraces();\n        var l = new this.LayoutObject(this.KPI.representation, this.KPI.value, gridColor);\n        var c = new this.ConfigObject(this.KPI.representation, this.KPI.value);\n        this.KPI.createElement('knime-bubble');\n        this.KPI.drawChart(t, l, c);\n    };\n\n    BubbleChart.createTraces = function () {\n        var self = this;\n        var traces = [];\n        var keys = {\n            dataKeys: [self.xAxisCol, self.yAxisCol, self.sizeCol, 'rowKeys', 'rowColors'],\n            plotlyKeys: [['x'], ['y'], ['marker.size'], ['text', 'ids'], ['marker.color']]\n        };\n\n        var data = this.KPI.getData(keys);\n        var sizeMult = this.KPI.value.options.sizeMultiplier;\n        var max = -Number.MAX_SAFE_INTEGER;\n\n        data.names.forEach(function (group, groupInd) {\n\n            data[self.sizeCol][groupInd].forEach(function (size) {\n                max = Math.max(max, size);\n            });\n\n            var newTrace = new self.TraceObject(data[self.xAxisCol][groupInd],\n                data[self.yAxisCol][groupInd], data[self.sizeCol][groupInd]);\n            newTrace.marker.color = data.rowColors[groupInd];\n            newTrace.text = data.rowKeys[groupInd];\n            newTrace.ids = data.rowKeys[groupInd];\n            newTrace.dataKeys = keys.dataKeys;\n            newTrace.name = group;\n            traces.push(newTrace);\n        });\n\n        traces.forEach(function (trace) {\n            trace.marker.sizeref = 2.0 * max / Math.pow(sizeMult, 2);\n        });\n\n        return traces;\n    };\n\n    BubbleChart.TraceObject = function (xData, yData, sizeData) {\n        this.x = xData;\n        this.y = yData;\n        this.mode = 'markers';\n        this.type = 'scatter';\n        this.name = '';\n        this.marker = {\n            color: [],\n            opacity: .5,\n            size: sizeData,\n            sizemode: 'area'\n        };\n        this.unselected = {\n            marker: {\n                opacity: .1\n            }\n        };\n        this.selected = {\n            marker: {\n                opacity: 1\n            }\n        };\n        return this;\n    };\n\n    BubbleChart.LayoutObject = function (rep, val, gridColor) {\n        this.title = {\n            text: val.options.title,\n            y: 1,\n            yref: 'paper',\n            yanchor: 'bottom'\n        };\n        this.showlegend = val.options.showLegend;\n        this.autoSize = true;\n        this.legend = {\n            x: 1,\n            y: 1,\n            itemsizing: 'constant'\n        };\n        this.font = {\n            size: 12,\n            family: 'sans-serif'\n        };\n        this.xaxis = {\n            title: val.options.xAxisLabel.length > 0 ? val.options.xAxisLabel\n                : val.options.xAxisColumn,\n            font: {\n                size: 12,\n                family: 'sans-serif'\n            },\n            showgrid: val.options.showGrid,\n            gridcolor: gridColor,\n            linecolor: rep.options.gridColor,\n            linewidth: 1,\n            nticks: 10\n\n        };\n        this.yaxis = {\n            title: val.options.yAxisLabel.length > 0 ? val.options.yAxisLabel\n                : val.options.yAxisColumn,\n            font: {\n                size: 12,\n                family: 'sans-serif'\n            },\n            showgrid: val.options.showGrid,\n            gridcolor: gridColor,\n            linecolor: rep.options.gridColor,\n            linewidth: 1,\n            nticks: 10,\n            minorgridcount: 1\n        };\n        this.margin = {\n            l: 50,\n            r: 15,\n            b: 35,\n            t: 50,\n            pad: 0\n        };\n        this.hovermode = rep.options.tooltipToggle ? 'closest' : 'none';\n        this.paper_bgcolor = rep.options.backgroundColor || '#ffffff';\n        this.plot_bgcolor = rep.options.daColor || '#ffffff';\n    };\n\n    BubbleChart.ConfigObject = function (rep, val) {\n        this.toImageButtonOptions = {\n            format: 'svg', // one of png, svg, jpeg, webp\n            filename: 'custom_image',\n            height: rep.options.svg ? rep.options.svg.height : 600,\n            width: rep.options.svg ? rep.options.svg.width : 800,\n            scale: 1 // Multiply title/legend/axis/canvas sizes by this factor\n        };\n        this.displaylogo = false;\n        this.responsive = rep.options.svg.fullscreen;\n        this.editable = rep.options.enableEditing;\n        this.scrollZoom = true;\n        this.showTips = false;\n        this.showLink = rep.options.enablePlotlyEditor;\n        this.modeBarButtonsToRemove = ['hoverClosestCartesian',\n            'hoverCompareCartesian', 'toggleSpikelines'];\n        return this;\n    };\n\n    BubbleChart.getSVG = function () {\n        return this.KPI.getSVG();\n    };\n\n    BubbleChart.validate = function () {\n        return true;\n    };\n\n    BubbleChart.getComponentValue = function () {\n        return this.KPI.getComponentValue();\n    };\n\n    BubbleChart.onSelectionChange = function (data) {\n        if (data) {\n            this.KPI.updateSelected(data);\n            var changeObj = {};\n            changeObj = this.KPI.getFilteredChangeObject();\n            this.KPI.update(changeObj);\n        }\n    };\n\n    BubbleChart.onFilterChange = function (data) {\n        if (data) {\n            this.KPI.updateFilter(data);\n            var changeObj = this.KPI.getFilteredChangeObject();\n            this.KPI.update(changeObj);\n        }\n    };\n\n    BubbleChart.drawKnimeMenu = function () {\n\n        var self = this;\n\n        if (self.KPI.representation.options.enableViewControls) {\n\n            if (self.KPI.value.options.showFullscreen) {\n                knimeService.allowFullscreen();\n            }\n\n            if (self.KPI.representation.options.showClearSelectionButton &&\n                (self.KPI.representation.options.enableSelection ||\n                    (knimeService.isInteractivityAvailable() &&\n                        (self.KPI.value.options.subscribeToSelection ||\n                            self.KPI.representation.options.subscribeSelectionToggle))\n                )) {\n                knimeService.addButton(\n                    'clear-selection-button',\n                    'minus-square',\n                    'Clear Selection',\n                    function () {\n                        self.onSelectionChange({ points: [] });\n                    }\n                );\n            }\n\n            if (self.KPI.representation.options.enableFeatureSelection) {\n                var xAxisSelection = knimeService.createMenuSelect(\n                    'x-axis-menu-item',\n                    this.xAxisCol,\n                    this.columns,\n                    function () {\n                        if (self.xAxisCol !== this.value) {\n                            self.xAxisCol = this.value;\n                            var layoutObj = {\n                                'xaxis.title': self.xAxisCol\n                            };\n                            var keys = {\n                                dataKeys: [self.xAxisCol, self.yAxisCol, self.sizeCol, 'rowKeys', 'rowColors'],\n                                plotlyKeys: [['x'], ['y'], ['marker.size'], ['text', 'ids'], ['marker.color']]\n                            };\n                            var valueObj = {\n                                xAxisColumn: self.xAxisCol\n                            };\n                            self.KPI.updateValue(valueObj);\n                            self.KPI.updateKeys(keys);\n                            self.KPI.update(false, layoutObj);\n                        }\n                    }\n                );\n\n                knimeService.addMenuItem(\n                    'X-Axis',\n                    'long-arrow-right',\n                    xAxisSelection,\n                    null,\n                    knimeService.SMALL_ICON\n                );\n\n                var yAxisSelection = knimeService.createMenuSelect(\n                    'y-axis-menu-item',\n                    this.yAxisCol,\n                    this.columns,\n                    function () {\n                        if (self.yAxisCol !== this.value) {\n                            self.yAxisCol = this.value;\n                            var layoutObj = {\n                                'yaxis.title': self.yAxisCol\n                            };\n                            var keys = {\n                                dataKeys: [self.xAxisCol, self.yAxisCol, self.sizeCol, 'rowKeys', 'rowColors'],\n                                plotlyKeys: [['x'], ['y'], ['marker.size'], ['text', 'ids'], ['marker.color']]\n                            };\n                            var valueObj = {\n                                yAxisColumn: self.yAxisCol\n                            };\n                            self.KPI.updateValue(valueObj);\n                            self.KPI.updateKeys(keys);\n                            self.KPI.update(false, layoutObj);\n                        }\n                    }\n                );\n\n                knimeService.addMenuItem(\n                    'Y-Axis',\n                    'long-arrow-up',\n                    yAxisSelection,\n                    null,\n                    knimeService.SMALL_ICON\n                );\n\n                var sizeSelection = knimeService.createMenuSelect(\n                    'size-menu-item',\n                    self.sizeCol,\n                    this.numericColumns,\n                    function () {\n                        if (self.sizeCol !== this.value) {\n                            self.sizeCol = this.value;\n                            var keys = {\n                                dataKeys: [self.xAxisCol, self.yAxisCol, self.sizeCol, 'rowKeys', 'rowColors'],\n                                plotlyKeys: [['x'], ['y'], ['marker.size'], ['text', 'ids'], ['marker.color']]\n                            };\n                            var valueObj = {\n                                sizeColumn: self.sizeCol\n                            };\n                            self.KPI.updateValue(valueObj);\n                            self.KPI.updateKeys(keys);\n                            self.KPI.update();\n                        }\n                    }\n                );\n\n                knimeService.addMenuItem(\n                    'Size Column',\n                    'search',\n                    sizeSelection,\n                    null,\n                    knimeService.SMALL_ICON\n                );\n\n                knimeService.addMenuDivider();\n            }\n\n            if (self.KPI.representation.options.enableSizeMultOption) {\n                var sizeMenuItem = knimeService.createMenuNumberField(\n                    'size-menu-item-item',\n                    self.KPI.value.options.sizeMultiplier,\n                    0,\n                    Number.MAX_SAFE_INTEGER,\n                    1,\n                    function () {\n                        if (self.KPI.value.options.sizeMultiplier !== this.value) {\n                            var newSizeMult = this.value;\n                            var changeObj = self.KPI.getFilteredChangeObject();\n                            var numTraces = changeObj['marker.size'].length;\n                            var max = -Number.MAX_SAFE_INTEGER;\n                            changeObj['marker.sizeref'] = [];\n                            for (var i = 0; i < 2; i++) {\n                                for (var j = 0; j < numTraces; j++) {\n                                    if (i === 0) {\n                                        changeObj['marker.size'][j].forEach(function (size) {\n                                            max = Math.max(max, size);\n                                        });\n                                    } else {\n                                        changeObj['marker.sizeref'].push(2.0 * max / Math.pow(newSizeMult, 2));\n                                    }\n                                }\n                            }\n                            var valueObj = {\n                                sizeMultiplier: newSizeMult\n                            };\n                            self.KPI.updateValue(valueObj);\n                            self.KPI.update(changeObj);\n                        }\n                    },\n                    true\n                );\n\n                knimeService.addMenuItem(\n                    'Bubble size parameter:',\n                    'arrows-h',\n                    sizeMenuItem,\n                    null,\n                    knimeService.SMALL_ICON\n                );\n                knimeService.addMenuDivider();\n            }\n\n            if (self.KPI.representation.options.tooltipToggle) {\n\n                var tooltipToggleCheckBox = knimeService.createMenuCheckbox(\n                    'show-tooltips-checkbox',\n                    self.KPI.representation.options.tooltipToggle,\n                    function () {\n                        if (self.KPI.representation.options.tooltipToggle !== this.checked) {\n                            self.KPI.representation.options.tooltipToggle = this.checked;\n                            var layoutObj = {\n                                hovermode: self.KPI.representation.options.tooltipToggle\n                                    ? 'closest' : false\n                            };\n                            self.KPI.update(false, layoutObj, true);\n                        }\n                    },\n                    true\n                );\n\n                knimeService.addMenuItem(\n                    'Show tooltips',\n                    'info',\n                    tooltipToggleCheckBox,\n                    null,\n                    knimeService.SMALL_ICON\n                );\n\n                knimeService.addMenuDivider();\n\n            }\n\n            if (self.KPI.representation.options.showSelectedOnlyToggle &&\n                (self.KPI.representation.options.enableSelection || (knimeService.isInteractivityAvailable() &&\n                    (self.KPI.representation.options.subscribeSelectionToggle || self.KPI.value.options.subscribeToSelection)))) {\n\n                var showOnlySelectedCheckbox = knimeService.createMenuCheckbox(\n                    'show-only-selected-checkbox',\n                    this.showOnlySelected,\n                    function () {\n                        if (self.KPI.showOnlySelected !== this.checked) {\n                            self.KPI.updateShowOnlySelected(this.checked);\n                            self.KPI.update();\n                        }\n                    },\n                    true\n                );\n\n                knimeService.addMenuItem(\n                    'Show Only Selected',\n                    'filter',\n                    showOnlySelectedCheckbox,\n                    null,\n                    knimeService.SMALL_ICON\n                );\n\n                knimeService.addMenuDivider();\n\n            }\n\n            if (knimeService.isInteractivityAvailable()) {\n\n                if (self.KPI.representation.options.enableSelection &&\n                    self.KPI.representation.options.publishSelectionToggle) {\n\n                    var publishSelectionCheckbox = knimeService.createMenuCheckbox(\n                        'publish-selection-checkbox',\n                        self.KPI.value.options.publishSelection,\n                        function () {\n                            if (self.KPI.value.options.publishSelection !== this.checked) {\n                                self.KPI.value.options.publishSelection = this.checked;\n                                self.KPI.togglePublishSelection(self.onSelectionChange);\n                            }\n                        },\n                        true\n                    );\n\n                    knimeService.addMenuItem(\n                        'Publish Selection',\n                        knimeService.createStackedIcon('check-square-o',\n                            'angle-right', 'faded left sm', 'right bold'),\n                        publishSelectionCheckbox,\n                        null,\n                        knimeService.SMALL_ICON\n                    );\n\n                }\n\n                if (self.KPI.representation.options.subscribeSelectionToggle) {\n\n                    var subscribeToSelectionCheckbox = knimeService.createMenuCheckbox(\n                        'subscribe-to-selection-checkbox',\n                        self.KPI.value.options.subscribeToSelection,\n                        function () {\n                            if (self.KPI.value.options.subscribeToSelection !== this.checked) {\n                                self.KPI.value.options.subscribeToSelection = this.checked;\n                                self.KPI.togglePublishSelection(self.onSelectionChange);\n                            }\n                        },\n                        true\n                    );\n\n                    knimeService.addMenuItem(\n                        'Subscribe to Selection',\n                        knimeService.createStackedIcon('check-square-o',\n                            'angle-double-right', 'faded right sm', 'left bold'),\n                        subscribeToSelectionCheckbox,\n                        null,\n                        knimeService.SMALL_ICON\n                    );\n                }\n\n                if (self.KPI.representation.options.subscribeFilterToggle) {\n\n                    var subscribeToFilterCheckbox = knimeService.createMenuCheckbox(\n                        'subscribe-to-filter-checkbox',\n                        self.KPI.value.options.subscribeToFilters,\n                        function () {\n                            if (self.KPI.value.options.subscribeToFilters !== this.checked) {\n                                self.KPI.value.options.subscribeToFilters = this.checked;\n                                self.KPI.toggleSubscribeToFilters(self.onFilterChange);\n                            }\n                        },\n                        true\n                    );\n\n                    knimeService.addMenuItem(\n                        'Subscribe to Filter',\n                        knimeService.createStackedIcon('filter',\n                            'angle-double-right', 'faded right sm', 'left bold'),\n                        subscribeToFilterCheckbox,\n                        null,\n                        knimeService.SMALL_ICON\n                    );\n                }\n            }\n        }\n    };\n\n    return BubbleChart;\n\n})();\n"
                    ],
                    "cssCode": [
                        "#knime-bubble {\n\twidth: 100%;\n\theight: 100vh;\n}\n\n.js-plotly-plot .plotly .modebar{\n    left: 2px !important;\n    top: 12px !important\n}\n\n.js-plotly-plot .plotly [data-title]::before, .js-plotly-plot .plotly [data-title]::after {\n    z-index: 2001 !important;\n    margin-right: -300% !important;\n    margin-top: -10% !important;\n    padding: 8px 5px !important;\n}\n\n.notifier-note > * {\n    font-family: \"Helvetica Neue\",Helvetica,Arial,sans-serif;\n    font-size: 14px;\n}\n\n.gtitle {\n    font-size: 24px !important;\n}"
                    ],
                    "flowVariables": {
                        "knime.workspace": "/Users/benlaney/nightly"
                    },
                    "options": {
                        "backgroundColor": "#FFFFFF",
                        "showClearSelectionButton": true,
                        "enableEditing": false,
                        "svg": {
                            "fullscreen": true,
                            "height": 600,
                            "width": 800
                        },
                        "enableGL": true,
                        "enableSizeMultOption": true,
                        "enableSelection": true,
                        "overrideColors": false,
                        "showSelectedOnlyToggle": true,
                        "tooltipToggle": true,
                        "dataColor": "#0000FF",
                        "enablePlotlyEditor": false,
                        "publishSelectionToggle": true,
                        "subscribeSelectionToggle": true,
                        "gridColor": "#000000",
                        "enableFeatureSelection": true,
                        "enableViewControls": true,
                        "reportMissing": true,
                        "subscribeFilterToggle": true,
                        "daColor": "#FFFFFF"
                    }
                },
                "viewValue": {
                    "@class": "org.knime.dynamic.js.v30.DynamicJSViewValue",
                    "outColumns": {},
                    "tables": {},
                    "flowVariables": {},
                    "options": {
                        "sizeColumn": "Universe_1_1",
                        "subscribeToFilters": true,
                        "showLegend": false,
                        "showFullscreen": true,
                        "showGrid": true,
                        "title": "Bubble Chart",
                        "yAxisColumn": "Cluster Membership",
                        "yAxisLabel": "",
                        "xAxisColumn": "Cluster Membership",
                        "sizeMultiplier": 40.0,
                        "xAxisLabel": "",
                        "showWarnings": true,
                        "subscribeToSelection": true,
                        "publishSelection": true,
                        "mValues": "Leave missing values"
                    }
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/requireJS/2.1.8/require.js",
                    "/js-lib/knime/knime_table_1_0_0.js",
                    "/org/knime/dynamic/js/dynamicJSNode.js"
                ],
                "initMethodName": "init",
                "validateMethodName": "validate",
                "setValidationErrorMethodName": "setValidationError",
                "getViewValueMethodName": "getComponentValue",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": "Only the first 10 rows are displayed.",
                    "displayPossible": true,
                    "nodeName": "Bubble Chart (Plotly)"
                },
                "namespace": "dynamicJSNode"
            },
            "15:0:27": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.selection.column.ColumnSelectionQuickFormRepresentation",
                    "label": "Label",
                    "description": "Enter Description",
                    "required": true,
                    "defaultValue": {
                        "@class": "org.knime.js.base.node.quickform.selection.column.ColumnSelectionQuickFormValue",
                        "column": ""
                    },
                    "currentValue": {
                        "@class": "org.knime.js.base.node.quickform.selection.column.ColumnSelectionQuickFormValue",
                        "column": ""
                    },
                    "possibleColumns": [
                        "Universe_0_0",
                        "Universe_0_1",
                        "Universe_1_0",
                        "Universe_1_1",
                        "Cluster Membership"
                    ],
                    "type": "Dropdown",
                    "limitNumberVisOptions": false,
                    "numberVisOptions": 10
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.selection.column.ColumnSelectionQuickFormValue",
                    "column": ""
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/org/knime/js/base/dialog/selection/single/DropdownSingleSelection.js",
                    "/org/knime/js/base/dialog/selection/single/ListSingleSelection.js",
                    "/org/knime/js/base/dialog/selection/single/RadioButtonSingleSelection.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/js/base/node/quickform/selection/column/ColumnSelection.js"
                ],
                "initMethodName": "init",
                "validateMethodName": null,
                "setValidationErrorMethodName": "setValidationErrorMessage",
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": "Auto-guessing default column.",
                    "displayPossible": true,
                    "nodeName": "Column Selection"
                },
                "namespace": "org_knime_js_base_node_quickform_selection_column"
            },
            "15:0:3": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.input.date2.DateInput2QuickFormRepresentation",
                    "label": "Label",
                    "description": "Enter Description",
                    "required": true,
                    "defaultValue": {
                        "@class": "org.knime.js.base.node.quickform.input.date2.DateInput2QuickFormValue",
                        "datestring": "2020-06-25T19:58:05+02:00[Europe/Rome]"
                    },
                    "currentValue": {
                        "@class": "org.knime.js.base.node.quickform.input.date2.DateInput2QuickFormValue",
                        "datestring": "2020-06-25T19:58:05+02:00[Europe/Rome]"
                    },
                    "shownowbutton": true,
                    "granularity": "show_minutes",
                    "usemin": false,
                    "usemax": false,
                    "useminexectime": false,
                    "usemaxexectime": false,
                    "usedefaultexectime": false,
                    "min": "2020-06-25T19:58:05+02:00[Europe/Rome]",
                    "max": "2020-06-25T19:58:05+02:00[Europe/Rome]",
                    "type": "LDT",
                    "zones": [
                        "Africa/Abidjan",
                        "Africa/Accra",
                        "Africa/Addis_Ababa",
                        "Africa/Algiers",
                        "Africa/Asmara",
                        "Africa/Asmera",
                        "Africa/Bamako",
                        "Africa/Bangui",
                        "Africa/Banjul",
                        "Africa/Bissau",
                        "Africa/Blantyre",
                        "Africa/Brazzaville",
                        "Africa/Bujumbura",
                        "Africa/Cairo",
                        "Africa/Casablanca",
                        "Africa/Ceuta",
                        "Africa/Conakry",
                        "Africa/Dakar",
                        "Africa/Dar_es_Salaam",
                        "Africa/Djibouti",
                        "Africa/Douala",
                        "Africa/El_Aaiun",
                        "Africa/Freetown",
                        "Africa/Gaborone",
                        "Africa/Harare",
                        "Africa/Johannesburg",
                        "Africa/Juba",
                        "Africa/Kampala",
                        "Africa/Khartoum",
                        "Africa/Kigali",
                        "Africa/Kinshasa",
                        "Africa/Lagos",
                        "Africa/Libreville",
                        "Africa/Lome",
                        "Africa/Luanda",
                        "Africa/Lubumbashi",
                        "Africa/Lusaka",
                        "Africa/Malabo",
                        "Africa/Maputo",
                        "Africa/Maseru",
                        "Africa/Mbabane",
                        "Africa/Mogadishu",
                        "Africa/Monrovia",
                        "Africa/Nairobi",
                        "Africa/Ndjamena",
                        "Africa/Niamey",
                        "Africa/Nouakchott",
                        "Africa/Ouagadougou",
                        "Africa/Porto-Novo",
                        "Africa/Sao_Tome",
                        "Africa/Timbuktu",
                        "Africa/Tripoli",
                        "Africa/Tunis",
                        "Africa/Windhoek",
                        "America/Adak",
                        "America/Anchorage",
                        "America/Anguilla",
                        "America/Antigua",
                        "America/Araguaina",
                        "America/Argentina/Buenos_Aires",
                        "America/Argentina/Catamarca",
                        "America/Argentina/ComodRivadavia",
                        "America/Argentina/Cordoba",
                        "America/Argentina/Jujuy",
                        "America/Argentina/La_Rioja",
                        "America/Argentina/Mendoza",
                        "America/Argentina/Rio_Gallegos",
                        "America/Argentina/Salta",
                        "America/Argentina/San_Juan",
                        "America/Argentina/San_Luis",
                        "America/Argentina/Tucuman",
                        "America/Argentina/Ushuaia",
                        "America/Aruba",
                        "America/Asuncion",
                        "America/Atikokan",
                        "America/Atka",
                        "America/Bahia",
                        "America/Bahia_Banderas",
                        "America/Barbados",
                        "America/Belem",
                        "America/Belize",
                        "America/Blanc-Sablon",
                        "America/Boa_Vista",
                        "America/Bogota",
                        "America/Boise",
                        "America/Buenos_Aires",
                        "America/Cambridge_Bay",
                        "America/Campo_Grande",
                        "America/Cancun",
                        "America/Caracas",
                        "America/Catamarca",
                        "America/Cayenne",
                        "America/Cayman",
                        "America/Chicago",
                        "America/Chihuahua",
                        "America/Coral_Harbour",
                        "America/Cordoba",
                        "America/Costa_Rica",
                        "America/Creston",
                        "America/Cuiaba",
                        "America/Curacao",
                        "America/Danmarkshavn",
                        "America/Dawson",
                        "America/Dawson_Creek",
                        "America/Denver",
                        "America/Detroit",
                        "America/Dominica",
                        "America/Edmonton",
                        "America/Eirunepe",
                        "America/El_Salvador",
                        "America/Ensenada",
                        "America/Fort_Nelson",
                        "America/Fort_Wayne",
                        "America/Fortaleza",
                        "America/Glace_Bay",
                        "America/Godthab",
                        "America/Goose_Bay",
                        "America/Grand_Turk",
                        "America/Grenada",
                        "America/Guadeloupe",
                        "America/Guatemala",
                        "America/Guayaquil",
                        "America/Guyana",
                        "America/Halifax",
                        "America/Havana",
                        "America/Hermosillo",
                        "America/Indiana/Indianapolis",
                        "America/Indiana/Knox",
                        "America/Indiana/Marengo",
                        "America/Indiana/Petersburg",
                        "America/Indiana/Tell_City",
                        "America/Indiana/Vevay",
                        "America/Indiana/Vincennes",
                        "America/Indiana/Winamac",
                        "America/Indianapolis",
                        "America/Inuvik",
                        "America/Iqaluit",
                        "America/Jamaica",
                        "America/Jujuy",
                        "America/Juneau",
                        "America/Kentucky/Louisville",
                        "America/Kentucky/Monticello",
                        "America/Knox_IN",
                        "America/Kralendijk",
                        "America/La_Paz",
                        "America/Lima",
                        "America/Los_Angeles",
                        "America/Louisville",
                        "America/Lower_Princes",
                        "America/Maceio",
                        "America/Managua",
                        "America/Manaus",
                        "America/Marigot",
                        "America/Martinique",
                        "America/Matamoros",
                        "America/Mazatlan",
                        "America/Mendoza",
                        "America/Menominee",
                        "America/Merida",
                        "America/Metlakatla",
                        "America/Mexico_City",
                        "America/Miquelon",
                        "America/Moncton",
                        "America/Monterrey",
                        "America/Montevideo",
                        "America/Montreal",
                        "America/Montserrat",
                        "America/Nassau",
                        "America/New_York",
                        "America/Nipigon",
                        "America/Nome",
                        "America/Noronha",
                        "America/North_Dakota/Beulah",
                        "America/North_Dakota/Center",
                        "America/North_Dakota/New_Salem",
                        "America/Ojinaga",
                        "America/Panama",
                        "America/Pangnirtung",
                        "America/Paramaribo",
                        "America/Phoenix",
                        "America/Port-au-Prince",
                        "America/Port_of_Spain",
                        "America/Porto_Acre",
                        "America/Porto_Velho",
                        "America/Puerto_Rico",
                        "America/Punta_Arenas",
                        "America/Rainy_River",
                        "America/Rankin_Inlet",
                        "America/Recife",
                        "America/Regina",
                        "America/Resolute",
                        "America/Rio_Branco",
                        "America/Rosario",
                        "America/Santa_Isabel",
                        "America/Santarem",
                        "America/Santiago",
                        "America/Santo_Domingo",
                        "America/Sao_Paulo",
                        "America/Scoresbysund",
                        "America/Shiprock",
                        "America/Sitka",
                        "America/St_Barthelemy",
                        "America/St_Johns",
                        "America/St_Kitts",
                        "America/St_Lucia",
                        "America/St_Thomas",
                        "America/St_Vincent",
                        "America/Swift_Current",
                        "America/Tegucigalpa",
                        "America/Thule",
                        "America/Thunder_Bay",
                        "America/Tijuana",
                        "America/Toronto",
                        "America/Tortola",
                        "America/Vancouver",
                        "America/Virgin",
                        "America/Whitehorse",
                        "America/Winnipeg",
                        "America/Yakutat",
                        "America/Yellowknife",
                        "Antarctica/Casey",
                        "Antarctica/Davis",
                        "Antarctica/DumontDUrville",
                        "Antarctica/Macquarie",
                        "Antarctica/Mawson",
                        "Antarctica/McMurdo",
                        "Antarctica/Palmer",
                        "Antarctica/Rothera",
                        "Antarctica/South_Pole",
                        "Antarctica/Syowa",
                        "Antarctica/Troll",
                        "Antarctica/Vostok",
                        "Arctic/Longyearbyen",
                        "Asia/Aden",
                        "Asia/Almaty",
                        "Asia/Amman",
                        "Asia/Anadyr",
                        "Asia/Aqtau",
                        "Asia/Aqtobe",
                        "Asia/Ashgabat",
                        "Asia/Ashkhabad",
                        "Asia/Atyrau",
                        "Asia/Baghdad",
                        "Asia/Bahrain",
                        "Asia/Baku",
                        "Asia/Bangkok",
                        "Asia/Barnaul",
                        "Asia/Beirut",
                        "Asia/Bishkek",
                        "Asia/Brunei",
                        "Asia/Calcutta",
                        "Asia/Chita",
                        "Asia/Choibalsan",
                        "Asia/Chongqing",
                        "Asia/Chungking",
                        "Asia/Colombo",
                        "Asia/Dacca",
                        "Asia/Damascus",
                        "Asia/Dhaka",
                        "Asia/Dili",
                        "Asia/Dubai",
                        "Asia/Dushanbe",
                        "Asia/Famagusta",
                        "Asia/Gaza",
                        "Asia/Harbin",
                        "Asia/Hebron",
                        "Asia/Ho_Chi_Minh",
                        "Asia/Hong_Kong",
                        "Asia/Hovd",
                        "Asia/Irkutsk",
                        "Asia/Istanbul",
                        "Asia/Jakarta",
                        "Asia/Jayapura",
                        "Asia/Jerusalem",
                        "Asia/Kabul",
                        "Asia/Kamchatka",
                        "Asia/Karachi",
                        "Asia/Kashgar",
                        "Asia/Kathmandu",
                        "Asia/Katmandu",
                        "Asia/Khandyga",
                        "Asia/Kolkata",
                        "Asia/Krasnoyarsk",
                        "Asia/Kuala_Lumpur",
                        "Asia/Kuching",
                        "Asia/Kuwait",
                        "Asia/Macao",
                        "Asia/Macau",
                        "Asia/Magadan",
                        "Asia/Makassar",
                        "Asia/Manila",
                        "Asia/Muscat",
                        "Asia/Nicosia",
                        "Asia/Novokuznetsk",
                        "Asia/Novosibirsk",
                        "Asia/Omsk",
                        "Asia/Oral",
                        "Asia/Phnom_Penh",
                        "Asia/Pontianak",
                        "Asia/Pyongyang",
                        "Asia/Qatar",
                        "Asia/Qostanay",
                        "Asia/Qyzylorda",
                        "Asia/Rangoon",
                        "Asia/Riyadh",
                        "Asia/Saigon",
                        "Asia/Sakhalin",
                        "Asia/Samarkand",
                        "Asia/Seoul",
                        "Asia/Shanghai",
                        "Asia/Singapore",
                        "Asia/Srednekolymsk",
                        "Asia/Taipei",
                        "Asia/Tashkent",
                        "Asia/Tbilisi",
                        "Asia/Tehran",
                        "Asia/Tel_Aviv",
                        "Asia/Thimbu",
                        "Asia/Thimphu",
                        "Asia/Tokyo",
                        "Asia/Tomsk",
                        "Asia/Ujung_Pandang",
                        "Asia/Ulaanbaatar",
                        "Asia/Ulan_Bator",
                        "Asia/Urumqi",
                        "Asia/Ust-Nera",
                        "Asia/Vientiane",
                        "Asia/Vladivostok",
                        "Asia/Yakutsk",
                        "Asia/Yangon",
                        "Asia/Yekaterinburg",
                        "Asia/Yerevan",
                        "Atlantic/Azores",
                        "Atlantic/Bermuda",
                        "Atlantic/Canary",
                        "Atlantic/Cape_Verde",
                        "Atlantic/Faeroe",
                        "Atlantic/Faroe",
                        "Atlantic/Jan_Mayen",
                        "Atlantic/Madeira",
                        "Atlantic/Reykjavik",
                        "Atlantic/South_Georgia",
                        "Atlantic/St_Helena",
                        "Atlantic/Stanley",
                        "Australia/ACT",
                        "Australia/Adelaide",
                        "Australia/Brisbane",
                        "Australia/Broken_Hill",
                        "Australia/Canberra",
                        "Australia/Currie",
                        "Australia/Darwin",
                        "Australia/Eucla",
                        "Australia/Hobart",
                        "Australia/LHI",
                        "Australia/Lindeman",
                        "Australia/Lord_Howe",
                        "Australia/Melbourne",
                        "Australia/NSW",
                        "Australia/North",
                        "Australia/Perth",
                        "Australia/Queensland",
                        "Australia/South",
                        "Australia/Sydney",
                        "Australia/Tasmania",
                        "Australia/Victoria",
                        "Australia/West",
                        "Australia/Yancowinna",
                        "Brazil/Acre",
                        "Brazil/DeNoronha",
                        "Brazil/East",
                        "Brazil/West",
                        "CET",
                        "CST6CDT",
                        "Canada/Atlantic",
                        "Canada/Central",
                        "Canada/Eastern",
                        "Canada/Mountain",
                        "Canada/Newfoundland",
                        "Canada/Pacific",
                        "Canada/Saskatchewan",
                        "Canada/Yukon",
                        "Chile/Continental",
                        "Chile/EasterIsland",
                        "Cuba",
                        "EET",
                        "EST5EDT",
                        "Egypt",
                        "Eire",
                        "Etc/GMT",
                        "Etc/GMT+0",
                        "Etc/GMT+1",
                        "Etc/GMT+10",
                        "Etc/GMT+11",
                        "Etc/GMT+12",
                        "Etc/GMT+2",
                        "Etc/GMT+3",
                        "Etc/GMT+4",
                        "Etc/GMT+5",
                        "Etc/GMT+6",
                        "Etc/GMT+7",
                        "Etc/GMT+8",
                        "Etc/GMT+9",
                        "Etc/GMT-0",
                        "Etc/GMT-1",
                        "Etc/GMT-10",
                        "Etc/GMT-11",
                        "Etc/GMT-12",
                        "Etc/GMT-13",
                        "Etc/GMT-14",
                        "Etc/GMT-2",
                        "Etc/GMT-3",
                        "Etc/GMT-4",
                        "Etc/GMT-5",
                        "Etc/GMT-6",
                        "Etc/GMT-7",
                        "Etc/GMT-8",
                        "Etc/GMT-9",
                        "Etc/GMT0",
                        "Etc/Greenwich",
                        "Etc/UCT",
                        "Etc/UTC",
                        "Etc/Universal",
                        "Etc/Zulu",
                        "Europe/Amsterdam",
                        "Europe/Andorra",
                        "Europe/Astrakhan",
                        "Europe/Athens",
                        "Europe/Belfast",
                        "Europe/Belgrade",
                        "Europe/Berlin",
                        "Europe/Bratislava",
                        "Europe/Brussels",
                        "Europe/Bucharest",
                        "Europe/Budapest",
                        "Europe/Busingen",
                        "Europe/Chisinau",
                        "Europe/Copenhagen",
                        "Europe/Dublin",
                        "Europe/Gibraltar",
                        "Europe/Guernsey",
                        "Europe/Helsinki",
                        "Europe/Isle_of_Man",
                        "Europe/Istanbul",
                        "Europe/Jersey",
                        "Europe/Kaliningrad",
                        "Europe/Kiev",
                        "Europe/Kirov",
                        "Europe/Lisbon",
                        "Europe/Ljubljana",
                        "Europe/London",
                        "Europe/Luxembourg",
                        "Europe/Madrid",
                        "Europe/Malta",
                        "Europe/Mariehamn",
                        "Europe/Minsk",
                        "Europe/Monaco",
                        "Europe/Moscow",
                        "Europe/Nicosia",
                        "Europe/Oslo",
                        "Europe/Paris",
                        "Europe/Podgorica",
                        "Europe/Prague",
                        "Europe/Riga",
                        "Europe/Rome",
                        "Europe/Samara",
                        "Europe/San_Marino",
                        "Europe/Sarajevo",
                        "Europe/Saratov",
                        "Europe/Simferopol",
                        "Europe/Skopje",
                        "Europe/Sofia",
                        "Europe/Stockholm",
                        "Europe/Tallinn",
                        "Europe/Tirane",
                        "Europe/Tiraspol",
                        "Europe/Ulyanovsk",
                        "Europe/Uzhgorod",
                        "Europe/Vaduz",
                        "Europe/Vatican",
                        "Europe/Vienna",
                        "Europe/Vilnius",
                        "Europe/Volgograd",
                        "Europe/Warsaw",
                        "Europe/Zagreb",
                        "Europe/Zaporozhye",
                        "Europe/Zurich",
                        "GB",
                        "GB-Eire",
                        "GMT",
                        "GMT0",
                        "Greenwich",
                        "Hongkong",
                        "Iceland",
                        "Indian/Antananarivo",
                        "Indian/Chagos",
                        "Indian/Christmas",
                        "Indian/Cocos",
                        "Indian/Comoro",
                        "Indian/Kerguelen",
                        "Indian/Mahe",
                        "Indian/Maldives",
                        "Indian/Mauritius",
                        "Indian/Mayotte",
                        "Indian/Reunion",
                        "Iran",
                        "Israel",
                        "Jamaica",
                        "Japan",
                        "Kwajalein",
                        "Libya",
                        "MET",
                        "MST7MDT",
                        "Mexico/BajaNorte",
                        "Mexico/BajaSur",
                        "Mexico/General",
                        "NZ",
                        "NZ-CHAT",
                        "Navajo",
                        "PRC",
                        "PST8PDT",
                        "Pacific/Apia",
                        "Pacific/Auckland",
                        "Pacific/Bougainville",
                        "Pacific/Chatham",
                        "Pacific/Chuuk",
                        "Pacific/Easter",
                        "Pacific/Efate",
                        "Pacific/Enderbury",
                        "Pacific/Fakaofo",
                        "Pacific/Fiji",
                        "Pacific/Funafuti",
                        "Pacific/Galapagos",
                        "Pacific/Gambier",
                        "Pacific/Guadalcanal",
                        "Pacific/Guam",
                        "Pacific/Honolulu",
                        "Pacific/Johnston",
                        "Pacific/Kiritimati",
                        "Pacific/Kosrae",
                        "Pacific/Kwajalein",
                        "Pacific/Majuro",
                        "Pacific/Marquesas",
                        "Pacific/Midway",
                        "Pacific/Nauru",
                        "Pacific/Niue",
                        "Pacific/Norfolk",
                        "Pacific/Noumea",
                        "Pacific/Pago_Pago",
                        "Pacific/Palau",
                        "Pacific/Pitcairn",
                        "Pacific/Pohnpei",
                        "Pacific/Ponape",
                        "Pacific/Port_Moresby",
                        "Pacific/Rarotonga",
                        "Pacific/Saipan",
                        "Pacific/Samoa",
                        "Pacific/Tahiti",
                        "Pacific/Tarawa",
                        "Pacific/Tongatapu",
                        "Pacific/Truk",
                        "Pacific/Wake",
                        "Pacific/Wallis",
                        "Pacific/Yap",
                        "Poland",
                        "Portugal",
                        "ROK",
                        "Singapore",
                        "SystemV/AST4",
                        "SystemV/AST4ADT",
                        "SystemV/CST6",
                        "SystemV/CST6CDT",
                        "SystemV/EST5",
                        "SystemV/EST5EDT",
                        "SystemV/HST10",
                        "SystemV/MST7",
                        "SystemV/MST7MDT",
                        "SystemV/PST8",
                        "SystemV/PST8PDT",
                        "SystemV/YST9",
                        "SystemV/YST9YDT",
                        "Turkey",
                        "UCT",
                        "US/Alaska",
                        "US/Aleutian",
                        "US/Arizona",
                        "US/Central",
                        "US/East-Indiana",
                        "US/Eastern",
                        "US/Hawaii",
                        "US/Indiana-Starke",
                        "US/Michigan",
                        "US/Mountain",
                        "US/Pacific",
                        "US/Pacific-New",
                        "US/Samoa",
                        "UTC",
                        "Universal",
                        "W-SU",
                        "WET",
                        "Zulu"
                    ]
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.input.date2.DateInput2QuickFormValue",
                    "datestring": "2020-06-25T19:58:05+02:00[Europe/Rome]"
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css",
                    "/org/knime/js/base/node/quickform/input/date2/DateInput2.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/js-lib/moment/2_17/moment.min.js",
                    "/js-lib/moment/2_17/timezone/moment-timezone-with-data.min.js",
                    "/org/knime/js/base/node/quickform/input/date2/DateInput2.js"
                ],
                "initMethodName": "init",
                "validateMethodName": "validate",
                "setValidationErrorMethodName": "setValidationErrorMessage",
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": null,
                    "displayPossible": true,
                    "nodeName": "Date&Time Input"
                },
                "namespace": "org_knime_js_base_node_quickform_input_date2"
            },
            "15:0:1": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.input.bool.BooleanInputQuickFormRepresentation",
                    "label": "Label",
                    "description": "Enter Description",
                    "required": true,
                    "defaultValue": {
                        "@class": "org.knime.js.base.node.quickform.input.bool.BooleanInputQuickFormValue",
                        "boolean": false
                    },
                    "currentValue": {
                        "@class": "org.knime.js.base.node.quickform.input.bool.BooleanInputQuickFormValue",
                        "boolean": false
                    }
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.input.bool.BooleanInputQuickFormValue",
                    "boolean": false
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/js/base/node/quickform/input/bool/BooleanInput.js"
                ],
                "initMethodName": "init",
                "validateMethodName": null,
                "setValidationErrorMethodName": null,
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": null,
                    "displayPossible": true,
                    "nodeName": "Boolean Input"
                },
                "namespace": "org_knime_js_base_node_quickform_input_bool"
            },
            "15:0:7": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.input.integer.IntInputQuickFormRepresentation",
                    "label": "Label",
                    "description": "Enter Description",
                    "required": true,
                    "defaultValue": {
                        "@class": "org.knime.js.base.node.quickform.input.integer.IntInputQuickFormValue",
                        "integer": 0
                    },
                    "currentValue": {
                        "@class": "org.knime.js.base.node.quickform.input.integer.IntInputQuickFormValue",
                        "integer": 0
                    },
                    "usemin": false,
                    "usemax": false,
                    "min": 0,
                    "max": 100
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.input.integer.IntInputQuickFormValue",
                    "integer": 0
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/js/base/node/quickform/input/integer/IntegerInput.js"
                ],
                "initMethodName": "init",
                "validateMethodName": "validate",
                "setValidationErrorMethodName": "setValidationErrorMessage",
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": null,
                    "displayPossible": true,
                    "nodeName": "Integer Input"
                },
                "namespace": "org_knime_js_base_node_quickform_input_integer"
            },
            "15:0:20": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.filter.column.ColumnFilterQuickFormRepresentation",
                    "label": "Label",
                    "description": "Enter Description",
                    "required": true,
                    "defaultValue": {
                        "@class": "org.knime.js.base.node.quickform.filter.column.ColumnFilterQuickFormValue",
                        "columns": [],
                        "settings": null
                    },
                    "currentValue": {
                        "@class": "org.knime.js.base.node.quickform.filter.column.ColumnFilterQuickFormValue",
                        "columns": [],
                        "settings": null
                    },
                    "possibleColumns": [
                        "Universe_0_0",
                        "Universe_0_1",
                        "Universe_1_0",
                        "Universe_1_1",
                        "Cluster Membership"
                    ],
                    "type": "Twinlist",
                    "spec": "{\"name\":\"settings\",\"value\":{\"column_spec_4\":{\"type\":\"tree\",\"value\":{\"column_properties\":{\"type\":\"tree\",\"value\":{}},\"meta_data\":{\"type\":\"tree\",\"value\":{}},\"column_name\":{\"type\":\"string\",\"value\":\"Cluster Membership\"},\"element_names\":{\"type\":\"tree\",\"value\":{\"array-size\":{\"type\":\"int\",\"value\":0}}},\"column_domain\":{\"type\":\"tree\",\"value\":{\"possible_values\":{\"type\":\"tree\",\"value\":{\"0\":{\"type\":\"tree\",\"value\":{\"datacell\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.StringCell\"},\"org.knime.core.data.def.StringCell\":{\"type\":\"tree\",\"value\":{\"StringCell\":{\"type\":\"string\",\"value\":\"Cluster_0\"}}}}},\"1\":{\"type\":\"tree\",\"value\":{\"datacell\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.StringCell\"},\"org.knime.core.data.def.StringCell\":{\"type\":\"tree\",\"value\":{\"StringCell\":{\"type\":\"string\",\"value\":\"Cluster_1\"}}}}},\"2\":{\"type\":\"tree\",\"value\":{\"datacell\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.StringCell\"},\"org.knime.core.data.def.StringCell\":{\"type\":\"tree\",\"value\":{\"StringCell\":{\"type\":\"string\",\"value\":\"Cluster_2\"}}}}},\"3\":{\"type\":\"tree\",\"value\":{\"datacell\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.StringCell\"},\"org.knime.core.data.def.StringCell\":{\"type\":\"tree\",\"value\":{\"StringCell\":{\"type\":\"string\",\"value\":\"Cluster_3\"}}}}},\"array-size\":{\"type\":\"int\",\"value\":4}}}}},\"column_type\":{\"type\":\"tree\",\"value\":{\"cell_class\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.StringCell\"}}}}},\"column_spec_3\":{\"type\":\"tree\",\"value\":{\"column_properties\":{\"type\":\"tree\",\"value\":{\"universe_name\":{\"type\":\"string\",\"value\":\"Universe_1\"}}},\"meta_data\":{\"type\":\"tree\",\"value\":{}},\"column_name\":{\"type\":\"string\",\"value\":\"Universe_1_1\"},\"element_names\":{\"type\":\"tree\",\"value\":{\"array-size\":{\"type\":\"int\",\"value\":0}}},\"column_domain\":{\"type\":\"tree\",\"value\":{\"lower_bound\":{\"type\":\"tree\",\"value\":{\"datacell\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.DoubleCell\"},\"org.knime.core.data.def.DoubleCell\":{\"type\":\"tree\",\"value\":{\"DoubleCell\":{\"type\":\"double\",\"value\":2.968693375858811E-4}}}}},\"upper_bound\":{\"type\":\"tree\",\"value\":{\"datacell\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.DoubleCell\"},\"org.knime.core.data.def.DoubleCell\":{\"type\":\"tree\",\"value\":{\"DoubleCell\":{\"type\":\"double\",\"value\":0.9993849706529441}}}}}}},\"column_type\":{\"type\":\"tree\",\"value\":{\"cell_class\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.DoubleCell\"}}}}},\"number_columns\":{\"type\":\"int\",\"value\":5},\"spec_name\":{\"type\":\"string\",\"value\":\"default\"},\"column_spec_0\":{\"type\":\"tree\",\"value\":{\"column_properties\":{\"type\":\"tree\",\"value\":{\"universe_name\":{\"type\":\"string\",\"value\":\"Universe_0\"}}},\"meta_data\":{\"type\":\"tree\",\"value\":{}},\"column_name\":{\"type\":\"string\",\"value\":\"Universe_0_0\"},\"element_names\":{\"type\":\"tree\",\"value\":{\"array-size\":{\"type\":\"int\",\"value\":0}}},\"column_domain\":{\"type\":\"tree\",\"value\":{\"lower_bound\":{\"type\":\"tree\",\"value\":{\"datacell\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.DoubleCell\"},\"org.knime.core.data.def.DoubleCell\":{\"type\":\"tree\",\"value\":{\"DoubleCell\":{\"type\":\"double\",\"value\":3.146251707363268E-4}}}}},\"upper_bound\":{\"type\":\"tree\",\"value\":{\"datacell\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.DoubleCell\"},\"org.knime.core.data.def.DoubleCell\":{\"type\":\"tree\",\"value\":{\"DoubleCell\":{\"type\":\"double\",\"value\":0.9989733848932081}}}}}}},\"column_type\":{\"type\":\"tree\",\"value\":{\"cell_class\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.DoubleCell\"}}}}},\"column_spec_2\":{\"type\":\"tree\",\"value\":{\"column_properties\":{\"type\":\"tree\",\"value\":{\"universe_name\":{\"type\":\"string\",\"value\":\"Universe_1\"}}},\"meta_data\":{\"type\":\"tree\",\"value\":{}},\"column_name\":{\"type\":\"string\",\"value\":\"Universe_1_0\"},\"element_names\":{\"type\":\"tree\",\"value\":{\"array-size\":{\"type\":\"int\",\"value\":0}}},\"column_domain\":{\"type\":\"tree\",\"value\":{\"lower_bound\":{\"type\":\"tree\",\"value\":{\"datacell\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.DoubleCell\"},\"org.knime.core.data.def.DoubleCell\":{\"type\":\"tree\",\"value\":{\"DoubleCell\":{\"type\":\"double\",\"value\":0.001490109088633118}}}}},\"upper_bound\":{\"type\":\"tree\",\"value\":{\"datacell\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.DoubleCell\"},\"org.knime.core.data.def.DoubleCell\":{\"type\":\"tree\",\"value\":{\"DoubleCell\":{\"type\":\"double\",\"value\":0.9994294605878551}}}}}}},\"column_type\":{\"type\":\"tree\",\"value\":{\"cell_class\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.DoubleCell\"}}}}},\"column_spec_1\":{\"type\":\"tree\",\"value\":{\"column_properties\":{\"type\":\"tree\",\"value\":{\"universe_name\":{\"type\":\"string\",\"value\":\"Universe_0\"}}},\"meta_data\":{\"type\":\"tree\",\"value\":{}},\"column_name\":{\"type\":\"string\",\"value\":\"Universe_0_1\"},\"element_names\":{\"type\":\"tree\",\"value\":{\"array-size\":{\"type\":\"int\",\"value\":0}}},\"column_domain\":{\"type\":\"tree\",\"value\":{\"lower_bound\":{\"type\":\"tree\",\"value\":{\"datacell\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.DoubleCell\"},\"org.knime.core.data.def.DoubleCell\":{\"type\":\"tree\",\"value\":{\"DoubleCell\":{\"type\":\"double\",\"value\":3.92425685382336E-4}}}}},\"upper_bound\":{\"type\":\"tree\",\"value\":{\"datacell\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.DoubleCell\"},\"org.knime.core.data.def.DoubleCell\":{\"type\":\"tree\",\"value\":{\"DoubleCell\":{\"type\":\"double\",\"value\":0.9999913741157336}}}}}}},\"column_type\":{\"type\":\"tree\",\"value\":{\"cell_class\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.DoubleCell\"}}}}}}}",
                    "limitNumberVisOptions": false,
                    "numberVisOptions": 10
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.filter.column.ColumnFilterQuickFormValue",
                    "columns": [],
                    "settings": null
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/js-lib/knime/knime_twinlist_1_0_0.js",
                    "/org/knime/js/base/dialog/selection/multiple/CheckBoxesMultipleSelections.js",
                    "/org/knime/js/base/dialog/selection/multiple/ListMultipleSelections.js",
                    "/org/knime/js/base/dialog/selection/multiple/TwinlistMultipleSelections.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/js/base/node/quickform/filter/column/ColumnFilter.js"
                ],
                "initMethodName": "init",
                "validateMethodName": null,
                "setValidationErrorMethodName": "setValidationErrorMessage",
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": null,
                    "displayPossible": true,
                    "nodeName": "Column Filter"
                },
                "namespace": "org_knime_js_base_node_quickform_filter_column"
            },
            "15:0:10": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.input.slider.SliderInputQuickFormRepresentation",
                    "label": "Label",
                    "description": "Enter Description",
                    "required": true,
                    "defaultValue": {
                        "@class": "org.knime.js.base.node.quickform.input.slider.SliderInputQuickFormValue",
                        "double": 50.0
                    },
                    "currentValue": {
                        "@class": "org.knime.js.base.node.quickform.input.slider.SliderInputQuickFormValue",
                        "double": 50.0
                    },
                    "sliderSettings": {
                        "@class": "org.knime.js.core.settings.slider.SliderSettings",
                        "range": {
                            "min": [
                                0.0
                            ],
                            "max": [
                                100.0
                            ]
                        },
                        "start": [
                            50.0
                        ],
                        "orientation": "horizontal",
                        "direction": "ltr",
                        "connect": [
                            false,
                            false
                        ]
                    }
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.input.slider.SliderInputQuickFormValue",
                    "double": 50.0
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css",
                    "/js-lib/noUiSlider/12_1_0/nouislider.min.css",
                    "/org/knime/js/base/node/quickform/input/slider/SliderInput.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/js-lib/wNumb/wNumb.js",
                    "/js-lib/noUiSlider/12_1_0/nouislider.min.js",
                    "/org/knime/js/base/node/quickform/input/slider/SliderInput.js"
                ],
                "initMethodName": "init",
                "validateMethodName": "validate",
                "setValidationErrorMethodName": "setValidationErrorMessage",
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": null,
                    "displayPossible": true,
                    "nodeName": "Slider Input"
                },
                "namespace": "org_knime_js_base_node_quickform_input_slider"
            },
            "15:0:21": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.filter.definition.rangeslider.RangeSliderFilterRepresentation",
                    "filterId": "6e9f0d85-594a-4981-97d9-94aeaefa300c",
                    "columnName": "Universe_1_1",
                    "disabled": false,
                    "tableId": "b14bc8c9-933b-4669-a841-e0f1228050d5",
                    "label": null,
                    "sliderSettings": {
                        "@class": "org.knime.js.core.settings.slider.SliderSettings",
                        "range": {
                            "min": [
                                0.0
                            ],
                            "max": [
                                0.999
                            ]
                        },
                        "start": [
                            0.0,
                            0.999
                        ],
                        "behaviour": "drag-tap",
                        "orientation": "horizontal",
                        "direction": "ltr",
                        "pips": {
                            "@class": "org.knime.js.core.settings.slider.SliderPipsSettings",
                            "density": 3,
                            "format": {
                                "@class": "org.knime.js.core.settings.numberFormat.NumberFormatSettings",
                                "mark": ".",
                                "decimals": 2,
                                "negative": "-"
                            },
                            "mode": "range"
                        },
                        "tooltips": [
                            {
                                "mark": ".",
                                "decimals": 2,
                                "negative": "-"
                            },
                            {
                                "mark": ".",
                                "decimals": 2,
                                "negative": "-"
                            }
                        ],
                        "fix": [
                            false,
                            true,
                            false
                        ]
                    }
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.filter.definition.RangeFilterValue",
                    "filter": {
                        "type": "range",
                        "columns": [
                            {
                                "type": "numeric",
                                "minimumInclusive": true,
                                "maximumInclusive": true,
                                "maximum": 0.9993849706529441,
                                "minimum": 2.968693375858811E-4,
                                "columnName": "Universe_1_1"
                            }
                        ],
                        "id": "6e9f0d85-594a-4981-97d9-94aeaefa300c",
                        "rows": null
                    }
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/noUiSlider/12_1_0/nouislider.min.css",
                    "/org/knime/js/base/node/quickform/filter/definition/slider/slider.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/wNumb/wNumb.js",
                    "/js-lib/noUiSlider/12_1_0/nouislider.min.js",
                    "/org/knime/js/base/node/quickform/filter/definition/slider/SliderFilter.js"
                ],
                "initMethodName": "init",
                "validateMethodName": "validate",
                "setValidationErrorMethodName": "setValidationErrorMessage",
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": null,
                    "displayPossible": true,
                    "nodeName": "Range Slider Filter Definition"
                },
                "namespace": "knimeQuickformFilterSlider"
            },
            "15:0:4": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.input.dbl.DoubleInputQuickFormRepresentation",
                    "label": "Label",
                    "description": "Enter Description",
                    "required": true,
                    "defaultValue": {
                        "@class": "org.knime.js.base.node.quickform.input.dbl.DoubleInputQuickFormValue",
                        "double": 0.0
                    },
                    "currentValue": {
                        "@class": "org.knime.js.base.node.quickform.input.dbl.DoubleInputQuickFormValue",
                        "double": 0.0
                    },
                    "usemin": false,
                    "usemax": false,
                    "min": 0.0,
                    "max": 1.0
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.input.dbl.DoubleInputQuickFormValue",
                    "double": 0.0
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/js/base/node/quickform/input/dbl/DoubleInput.js"
                ],
                "initMethodName": "init",
                "validateMethodName": "validate",
                "setValidationErrorMethodName": "setValidationErrorMessage",
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": null,
                    "displayPossible": true,
                    "nodeName": "Double Input"
                },
                "namespace": "org_knime_js_base_node_quickform_input_dbl"
            },
            "15:0:9": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.ext.js.node.quickform.input.molecule.MoleculeStringInputQuickFormRepresentation",
                    "label": "Label",
                    "description": "Enter Description",
                    "required": true,
                    "defaultValue": {
                        "@class": "org.knime.ext.js.node.quickform.input.molecule.MoleculeStringInputQuickFormValue",
                        "moleculeString": ""
                    },
                    "currentValue": {
                        "@class": "org.knime.ext.js.node.quickform.input.molecule.MoleculeStringInputQuickFormValue",
                        "moleculeString": ""
                    },
                    "sketcherLocation": null,
                    "format": "SDF",
                    "sketcherPath": "",
                    "width": 830,
                    "height": 500
                },
                "viewValue": {
                    "@class": "org.knime.ext.js.node.quickform.input.molecule.MoleculeStringInputQuickFormValue",
                    "moleculeString": ""
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css",
                    "/js-lib/ketcher/ketcher.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/core/require.js",
                    "/org/knime/ext/js/node/quickform/input/molecule/MoleculeStringInput.js"
                ],
                "initMethodName": "init",
                "validateMethodName": "validate",
                "setValidationErrorMethodName": "setValidationErrorMessage",
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": null,
                    "displayPossible": true,
                    "nodeName": "Molecule String Input"
                },
                "namespace": "org_knime_ext_js_node_quickform_input_molecule"
            },
            "15:0:8": {
                "@class": "org.knime.js.core.JSONWebNode",
                "viewRepresentation": {
                    "@class": "org.knime.js.base.node.quickform.input.listbox.ListBoxInputQuickFormRepresentation",
                    "label": "Label",
                    "description": "Enter Description",
                    "required": true,
                    "defaultValue": {
                        "@class": "org.knime.js.base.node.quickform.input.listbox.ListBoxInputQuickFormValue",
                        "string": ""
                    },
                    "currentValue": {
                        "@class": "org.knime.js.base.node.quickform.input.listbox.ListBoxInputQuickFormValue",
                        "string": ""
                    },
                    "regex": "",
                    "errormessage": "",
                    "separator": "\\n",
                    "separateeachcharacter": false,
                    "omitempty": true,
                    "separatorregex": "",
                    "numberVisOptions": 5
                },
                "viewValue": {
                    "@class": "org.knime.js.base.node.quickform.input.listbox.ListBoxInputQuickFormValue",
                    "string": ""
                },
                "stylesheets": [
                    "/js-lib/font-awesome/4_7_0/css/font-awesome.min.css",
                    "/js-lib/knime/service/knime.css",
                    "/js-lib/jQueryUI/min/themes/base/jquery-ui.min.css",
                    "/org/knime/js/base/util/quickform/quickformStyles.css"
                ],
                "customCSS": "",
                "javascriptLibraries": [
                    "/js-lib/knime/service/knime_service_1_0_0.js",
                    "/js-lib/jQuery/jquery-1.11.0.min.js",
                    "/js-lib/jQueryUI/min/ui/jquery-ui.min.js",
                    "/org/knime/js/base/util/quickform/knime_quickform_utils_1_0_0.js",
                    "/org/knime/js/base/node/quickform/input/listbox/ListBoxInput.js"
                ],
                "initMethodName": "init",
                "validateMethodName": "validate",
                "setValidationErrorMethodName": "setValidationErrorMessage",
                "getViewValueMethodName": "value",
                "nodeInfo": {
                    "@class": "org.knime.js.core.JSONWebNodeInfo",
                    "nodeAnnotation": "",
                    "nodeState": "executed",
                    "nodeErrorMessage": null,
                    "nodeWarnMessage": "Auto guessing separator.",
                    "displayPossible": true,
                    "nodeName": "List Box Input"
                },
                "namespace": "org_knime_js_base_node_quickform_input_listbox"
            }
        },
        "version": "4.2.0.v202006251005"
    }
}